<%+header%>


<script>
	$(function($)
	{
		uiPageInit();
	})
	/* Global */
	var G_SDK_QOS_SERVER_STATE_ENABLE = 1;
	var G_SDK_QOS_SERVER_STATE_DISABLE = 0;
	var configList, qosServerStatus;
	var operatorName;
	var addConfigId;
	var arrPriority;
	var arrProtocol;
	var arrService;
	
	/* test */
	var arrIpAddress;
	var baseHref_all = "<%=REQUEST_URI%>";

	
	function initGlobleParam()
	{
		 configList=[];
		 qosServerStatus=0;
		 operatorName = 0;
		 addConfigId = 0;
		 arrPriority  = [null,"<%:ids_qos_high%>","<%:ids_qos_normal%>","<%:ids_qos_low%>"];
		 arrProtocol = ["<%:ids_all%>","TCP","UDP","ICMP"];
		 arrService = ["<%:ids_all%>",null,"BitTorrent","eMule",null,"FTP",null,"HTTP",null,null,null,null,null,"POP3","SMTP",null,null];
		 arrIpAddress = [];
	}
	function uiPageInit()
	{
		initGlobleParam();
		formload();
		var $qosServerState = $("#qosServer_State").show();

		/* five button init */
		var $btnAdd = $("#btnAdd");
		var $btnDelete = $("#btnDelete");
		var $btnEdit = $("#btnEdit");
		var $set_btnApply = $("#set_btnApply");
		var $set_btnCancel = $("#set_btnCancel");
		$btnDelete.setBtnDisabled();
		$btnEdit.setBtnDisabled();
		$btnAdd.removeBtnDisabled();
		$set_btnApply.setBtnDisabled();
		$set_btnCancel.setBtnDisabled();

		$set_btnCancel.click(function()
		{
			location.href = baseHref_all;
		});

		$btnAdd.click(AddApply);
		$btnDelete.click(DeleteApply);
		$btnEdit.click(EditApply);
		$set_btnApply.click(SaveApply);

		/* qosServerStatus init */
		if (qosServerStatus == null || qosServerStatus == "")
		{
			qosServerStatus = 0;
		}
		showSwitchStatus($qosServerState, qosServerStatus, G_SDK_QOS_SERVER_STATE_ENABLE);

		if (configList != null && configList.length != 0)
		{
			showServerConfigItem(configList);
		}

		/* checkBox init */
		$("input[name='ckbAllconfig']").attr("disabled",false).change(function()
		{
			if ($(this).attr("checked") == "checked")
			{
				$("input[name='ckbsingleconfig']").each(function()
				{
					$(this).attr("checked", "checked");
				});
			} else
			{
				$("input[name='ckbsingleconfig']").each(function()
				{
					$(this).attr("checked", null);
				});
			}
			listenMark();
		});
		$("input[name='ckbAllconfig']").attr("checked", null);

		$("input[name='ckbsingleconfig']").change(function()
		{
			listenMark();
		});
		$("table input:[type=text]").attr("disabled", true);
		$("table select").attr("disabled", true);
	}
	
	function formload()
	{
		var configInfo = SDK.Qos.GetQosSettings();
		if (!configInfo.hasOwnProperty("error"))
		{
			qosServerStatus = configInfo.result.State;
			configList = configInfo.result.QosList;
		}
		var dpcpListInfo = SDK.LAN.GetDHCPHostList();
		if (!dpcpListInfo.hasOwnProperty("error"))
		{
			ipListInfo = dpcpListInfo.List;
			//arrIpAddress = [];
			for ( var i in ipListInfo)
			{
				if (ipListInfo[i].IPAddress != null && ipListInfo[i].IPAddress != "")
				{
					arrIpAddress.push(ipListInfo[i].IPAddress)
				}
			}
			for ( var i in configList)
			{
				if (configList[i].SrcIPAddress != null && configList[i].SrcIPAddress != "")
				{
					if ($.inArray(configList[i].SrcIPAddress,arrIpAddress) == -1)
					{
						arrIpAddress.push(configList[i].SrcIPAddress)
					}
				}
			}
			arrIpAddress.unshift("ALL");
		}
	}
	function showServerConfigItem(configList)
	{
		if (configList != null)
		{
			for ( var e in configList)
			{
				var itemConfig = configList[e];
				if (itemConfig != "")
				{
					addconfigItem(itemConfig);
				}
			}
		}
	}

	function addconfigItem(itemConfig)
	{
		var _item_Id = itemConfig.Id, _item_Priority = itemConfig.Priority, _item_SrcIPAddress = itemConfig.SrcIPAddress || "ALL";
		var _item_Port = itemConfig.Port, _item_Protocol = itemConfig.Protocol;
		var _item_Service = itemConfig.Service;
		var itemTable = $("#serverConfigTable");
		var itemStr = "";
		itemStr = "<td><span class=qosID >"+_item_Id+"</span></td>" + 
		"<td><select class=Priority ></select></td>" +
		"<td><div class=ip-div-wrap><p class=dys><select class=IpAddress onchange=IpAddress_input_"+_item_Id+".value=this.options[this.selectedIndex].innerHTML></select></p><p class=dyw><input id=IpAddress_input_"+_item_Id+" class=IpAddress_input type=text /></p></div></td>"+
		"<td><select class='Service' onchange='changeService($(this))'></select></td>" + 
		"<td><select class=Protocol ></select></td>"+ 
		"<td><input type=text data-val='"+_item_Port+"' value='"+_item_Port+"' class=port  maxlength=5/></td>" + 
		"<td><input type=checkbox name=ckbsingleconfig value="+_item_Id+" /></td>";
		
		itemTable.append("<tr class=singleConfig_" + _item_Id +">" + itemStr + "</tr>");
		
		var Priority_obj = $("#serverConfigTable .singleConfig_" + _item_Id +" .Priority");
		var IpAddress_obj = $("#serverConfigTable .singleConfig_" + _item_Id +" .IpAddress");
		var Service_obj = $("#serverConfigTable .singleConfig_" + _item_Id +" .Service");
		var Protocol_obj = $("#serverConfigTable .singleConfig_" + _item_Id +" .Protocol");
		var IpAddress_input_obj = $("#IpAddress_input_"+_item_Id);

		
		addOption(Priority_obj,arrPriority);
		addOption(IpAddress_obj,arrIpAddress);
		addOption(Service_obj,arrService);
		addOption(Protocol_obj,arrProtocol);
		
		Priority_obj.val(_item_Priority);
		Service_obj.val(_item_Service);
		Protocol_obj.val(_item_Protocol).attr("data-val",_item_Protocol);
		IpAddress_obj.val(getCurrIPNum(arrIpAddress,_item_SrcIPAddress));
		IpAddress_input_obj.val(_item_SrcIPAddress);
	}
	
	function AddApply()
	{
		operatorName = 1;
		addConfigId = $("#serverConfigTable tr").length;
		$("#btnDelete,#btnEdit").setBtnDisabled();
		$("#set_btnApply,#set_btnCancel").removeBtnDisabled();
		$("input[name=ckbsingleconfig]").attr("checked",false).attr("disabled",true);
		$("input[name=ckbAllconfig]").attr("checked",false).attr("disabled",true);
		var itemTable = $("#serverConfigTable");
	
		var itemStr = "";
		itemStr = "<td><span class=qosID >"+addConfigId+"</span></td>" + 
		"<td><select class=Priority ></select></td>" +
		"<td><div class=ip-div-wrap><p class=dys><select class=IpAddress onchange=IpAddress_input_"+addConfigId+".value=this.options[this.selectedIndex].innerHTML></select></p><p class=dyw><input id=IpAddress_input_"+addConfigId+" class=IpAddress_input type=text /></p></div></td>"+
		//"<td><div class=ip-div-wrap><select class=IpAddress onchange=IpAddress_input_"+addConfigId+".value=this.options[this.selectedIndex].innerHTML></select><input id=IpAddress_input_"+addConfigId+" class=IpAddress_input type=text /></div></td>" + 
		"<td><select class='Service' onchange='changeService($(this))'></select></td>" + 
		"<td><select class=Protocol ></select></td>"+ 
		"<td><input type=text class=port maxlength=5/></td>" + 
		"<td><input type=checkbox name=ckbsingleconfig value="+addConfigId+" /></td>";
		itemTable.append("<tr class=singleConfig_" + addConfigId +">" + itemStr + "</tr>");
		
		var Priority_obj = $("#serverConfigTable .singleConfig_" + addConfigId +" .Priority");
		var IpAddress_obj = $("#serverConfigTable .singleConfig_" + addConfigId +" .IpAddress");
		var Service_obj = $("#serverConfigTable .singleConfig_" + addConfigId +" .Service");
		var Protocol_obj = $("#serverConfigTable .singleConfig_" + addConfigId +" .Protocol");
		var IpAddress_input_obj = $("#IpAddress_input_"+addConfigId);

		
		addOption(Priority_obj,arrPriority);
		addOption(IpAddress_obj,arrIpAddress);
		addOption(Service_obj,arrService);
		addOption(Protocol_obj,arrProtocol);
		
		Priority_obj.val(1);
		Service_obj.val(0);
		Priority_obj.val(0);
		IpAddress_obj.val(getCurrIPNum(arrIpAddress,"ALL"));
		IpAddress_input_obj.val("ALL");

	}

	function EditApply()
	{
		operatorName = 2;
		$("#btnDelete,#btnAdd").setBtnDisabled();
		$("#set_btnApply,#set_btnCancel").removeBtnDisabled();
		$("input[name='ckbAllconfig']").attr("disabled", true);
		$("input[name='ckbsingleconfig']:checked").each(function()
		{
			var that = $(this);
			that.attr("disabled", true);
			var editConfigId = that.val();	
			if($(".singleConfig_" + editConfigId + " select.Service").val()== 0){
				$(".singleConfig_" + editConfigId + " input[type=text]").attr("disabled", false);
				$(".singleConfig_" + editConfigId + " select").attr("disabled", false);
			}else{
				$(".singleConfig_" + editConfigId + " select.Priority").attr("disabled", false);
				$(".singleConfig_" + editConfigId + " select.IpAddress").attr("disabled", false);
				$(".singleConfig_" + editConfigId + " input[type=text].IpAddress_input").attr("disabled", false);
			}
			
		})
	}

	function DeleteApply()
	{
		operatorName = 3;
		$("#btnEdit,#btnAdd").setBtnDisabled();
		$("#set_btnApply,#set_btnCancel").removeBtnDisabled();
		$("input[name='ckbsingleconfig']:checked").each(function()
		{
				var that = $(this);
				that.attr("disabled", true);
				var deleteConfigId = that.val();
				$("table tr").remove(".singleConfig_" + deleteConfigId);
		})
		listenMark();

	}
	
	function SaveApply()
	{
		var params = getParam();
		if(params.hasOwnProperty("error") || params == null)
		{
			return;
		}
		var checkResult;
		var configList = params.QosList;
		if (configList.length>0)
		{
			for(var i = 0;i<configList.length;i++)
			{
				checkResult = checkParamInvalid(configList[i]);
				if (checkResult == 0)
				{
					configList[i].Id = i;
					continue;
				}else
				{
					var warnClassName="";
					switch (checkResult)
					{
					case 2:
						warnClassName = "IpAddress_input";
						sys.alert("<%:ids_qos_ipInvalid%>")
						break;
					case 4:
						warnClassName = "port";
						sys.alert("<%:ids_qos_portInvalid%>")
					break;
						break;
					default:
						warnClassName = "param";
						sys.alert("<%:ids_vtServerParamsInvalid%>");
						break;
					}
					$(".singleConfig_"+configList[i].Id+" ."+warnClassName).addClass("input-error").bind("focus", function()
					{
						$(".singleConfig_"+configList[i].Id+" ."+warnClassName).removeClass("input-error");
					});
					$(".singleConfig_"+configList[i].Id+" .IpAddress").bind("change focus", function()
					{
						$(".singleConfig_"+configList[i].Id+" ."+warnClassName).removeClass("input-error");
					});
					return;
				}
			}
		}
		var result = SDK.Qos.SetQosSettings(params.State,params.QosList).error;
		if (result == API_RESULT_SUCCESS)
		{
			sys.alert("<%:ids_succeeded%>", function()
			{
				location.href = baseHref_all;
			});
		} else
		{
			sys.alert("<%:ids_failed%>", function()
			{
				$("#set_btnApply,#set_btnCancel").removeBtnDisabled();
			});
		}
	}
	
	function getParam()
	{
		var param;
		var ServerConfigList = [];
		qosServerStatus = $("#qosServer_State").is(":checked") ? 1 : 0;
		if (qosServerStatus !=0 && qosServerStatus != 1)
		{
			return {"error":0};
		}
		if($("table tr").size() > 1)
		{
			$("table tr").each(function(i)
			{
				if (i > 0)
				{
					var that = $(this);
					var singleConfig = {
						"Id":parseInt(that.find(".qosID").html()), 
						"Priority":parseInt(that.find(".Priority").val()),
						"SrcIPAddress":$.trim(that.find(".IpAddress_input").val()) == "ALL" ? "" : $.trim(that.find(".IpAddress_input").val()),
						"Protocol": parseInt(that.find(".Protocol").val()),
						"Port": $.trim(that.find(".port").val()),
						"Service": parseInt(that.find(".Service").val())
					}
					ServerConfigList.push(singleConfig);
				}
			})
		}
		param = {
			"State" :qosServerStatus,
			"QosList" : ServerConfigList
		}
		return param;
	}

	/* Util */
/* 	0.OK 1.Priority 1 	2.IP Address 	3.Protocol 	4.Port 5.Service */
	function checkParamInvalid(param)
	{
		if (param.hasOwnProperty("Id") && param.hasOwnProperty("Priority") && param.hasOwnProperty("SrcIPAddress") && param.hasOwnProperty("Protocol") && param.hasOwnProperty("Port") && param.hasOwnProperty("Service"))
		{
			
			if (!isNumber(param.Priority))
			{
				return 1;
			}
			if (!checkIpAddressInvalid(param.SrcIPAddress))
			{
				return 2;
			}
			if (!isNumber(param.Protocol))
			{
				return 3;
			}
			if (!checkPortInvalid(param.Port))
			{
				return 4;
			}
			if (!isNumber(param.Service))
			{
				return 5;
			}
			return 0;

		}
		
		
	}
	function showSwitchStatus($CheckedState, InitStateValue, STATE_ENABLE)
	{
		var CheckedState = $CheckedState.is(":checked");
		var $hasSwitch = $CheckedState.parent();
		$hasSwitch.addClass("has-switch");
		if (InitStateValue == STATE_ENABLE)
		{
			CheckedState = true;
		} else
		{
			CheckedState = false;
		}
		if (CheckedState == true)
		{
			$hasSwitch.removeClass("switch-off").addClass("switch-on");
			$CheckedState.attr("checked", true);
		} else
		{
			$hasSwitch.removeClass("switch-on").addClass("switch-off");
			$CheckedState.attr("checked", false);
		}
		$hasSwitch.click(function()
		{
			$("#set_btnApply").removeBtnDisabled();
			$("#set_btnCancel").removeBtnDisabled();
			if (CheckedState == true)
			{
				$hasSwitch.removeClass("switch-on").addClass("switch-off");
				CheckedState = false;
				$CheckedState.attr("checked", false);
			} else
			{
				$hasSwitch.removeClass("switch-off").addClass("switch-on");
				CheckedState = true;
				$CheckedState.attr("checked", true);
			}
		});
	}

	function checkIpAddressInvalid(address)
	{
		if (address == "" || address == null)
		{
			return true;
		}
		var addrParts = address.split('.');
		if (addrParts.length != 4)
		{
			return false;
		}

		for ( var i = 0; i < 4; i++)
		{
			if (isNaN(addrParts[i]) == true)
			{
				return false;
			}

			if (addrParts[i] == '')
			{
				return false;
			}

			if (addrParts[i].indexOf(' ') != -1)
			{
				return false;
			}

			if ((addrParts[i].indexOf('0') == 0) && (addrParts[i].length != 1))
			{
				return false;
			}
		}
		if(addrParts[0] <=0 || addrParts[0]==127 || addrParts[0]>223 || addrParts[1]<0 || addrParts[1]>255 || addrParts[2]<0 || addrParts[2]>255 || addrParts[3] <=0 || addrParts[3]>=255)
		{
			return false;
		}
		return true;
	}

	function checkPortInvalid(portStr)
	{
		var portList = portStr.split(",");
		if (portStr == "" || portList.length == 0)
		{
			return true;
		}
		var re = /^([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]{1}|6553[0-5])$/;
		for ( var i in portList)
		{
			if (!re.test(portList[i]))
			{
				return false;
			}
		}
		return true;
	}

	function checkStausInvalid(status)
	{
		if (status == 0 || status == 1)
		{
			return true;
		} else
		{
			return false;
		}
	}
	function isNumber(str)
	{
		return /^-?[0-9]+$/.test(str);
	}
	function checkStringInvalid(str)
	{
		if (str == null || str == "")
		{
			return false;
		} else
		{
			return true;
		}
	}

	function listenMark()
	{
		var $ckbConfig = $("input[name='ckbsingleconfig']");
		var ckbConfigLeng = $ckbConfig.length;
		var $ckbConfigChecked = $("input[name='ckbsingleconfig']:checked");
		var ckbConfigCheckedLeng = $ckbConfigChecked.length;
		var $ckbSelectAllConfig = $("input[name='ckbAllconfig']");
		if (ckbConfigLeng > 0 && ckbConfigCheckedLeng == ckbConfigLeng)
		{
			$ckbSelectAllConfig.attr("checked", true);
		} else
		{
			$ckbSelectAllConfig.attr("checked", false);
		}

		if (ckbConfigCheckedLeng == 0)
		{
			$("#btnDelete").setBtnDisabled();
			$("#btnEdit").setBtnDisabled();
		} else
		{
			if (operatorName == 0)
			{
				$("#btnDelete").removeBtnDisabled();
				$("#btnEdit").removeBtnDisabled();

			} else if (operatorName == 1)
			{
				$("#btnDelete").setBtnDisabled();
				$("#btnEdit").setBtnDisabled();
				$("#btnAdd").removeBtnDisabled();
			} else if (operatorName == 2)
			{
				$("#btnDelete").setBtnDisabled();
				$("#btnAdd").setBtnDisabled();
				$("#btnEdit").removeBtnDisabled();
			} else if (operatorName == 3)
			{
				$("#btnAdd").setBtnDisabled();
				$("#btnEdit").setBtnDisabled();
				$("#btnDelete").removeBtnDisabled();
			} else
			{
				$("#btnAdd").setBtnDisabled();
				$("#btnDelete").setBtnDisabled();
				$("#btnEdit").setBtnDisabled();
			}
		}
	}
	
	function addOption(obj,arrData)
	{
		var itemStr = "";
		for ( var i = 0; i < arrData.length; i++){
			if(arrData[i] != null){
				itemStr += "<option value="+i+">"+arrData[i]+"</option>"
			}
		}
		obj.append(itemStr);
	}
	function getCurrIPNum(arr,IpText)
	{
		if (arr == null || arr.length == 0 || IpText == "")
		{
			return 0;
		}
		for ( var i in arr)
		{
			if (IpText == arr[i])
			{
				return i;
			}
		}
		return 0;
	}

	function changeService(obj){
		var protocolObj = obj.parents("tr").find(".Protocol");
		var portObj = obj.parents("tr").find(".port");
		if(obj.val() != 0){
			protocolObj.attr("disabled", true).val(0);
			portObj.attr("disabled", true).val("");
		}else{
			protocolObj.attr("disabled", false).val(protocolObj.attr("data-val"));
			portObj.attr("disabled", false).val(protocolObj.attr("data-val"));
		}
		
	}
</script>

<div id="qos_page_map" class="main-box border-notop form-horizontal">
	<div class="cbi-map">
		<div class="title-switch-checkbox border-all">
			<h4 class="pull-left"><%:ids_qos_titleQos%></h4>
			<div class="switch-checkbox-right">
				<input id="qosServer_State" name="qos-server-status-value" type="checkbox" style="display:none;"/>
			</div>
		</div>

		<fieldset class="cbi-section border-notop mb20">
			<div class="text-right mb20">
				<button class="btn btn-primary" id="btnAdd"><%:ids_add%></button>
				<button class="btn btn-primary" id="btnEdit"><%:ids_edit%></button>
				<button class="btn btn-primary" id="btnDelete"><%:ids_delete%></button>
			</div>
			<table class="table table-striped table-hover table-tc border-notop" id="serverConfigTable">
				<tr>
					<th width="8%"><%:ids_id%></th>
					<th width="13%"><%:ids_qos_priority%></th>
					<th width="20%"><%:ids_ipAddress%></th>
					<th width="13%"><%:ids_service%></th>
					<th width="13%"><%:ids_protocol%></th>
					<th width="20%"><%:ids_port%></th>
					<th width="12%"><input type="checkbox" name="ckbAllconfig" /></th>
				</tr>
			</table>
		</fieldset>
	</div>
	<div class="text-center">
		<button class="btn btn-primary" id="set_btnApply"><%:ids_apply%></button>
		<button class="btn btn-primary" id="set_btnCancel"><%:ids_cancel%></button>
	</div>
</div>
<div id="mask">
	<iframe id="maskIframe"></iframe>
</div>
<div id="loading"></div>
<%+footer%>
