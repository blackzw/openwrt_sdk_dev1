// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: connection_messages.proto

#ifndef PROTOBUF_connection_5fmessages_2eproto__INCLUDED
#define PROTOBUF_connection_5fmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace ConnectionMessages {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_connection_5fmessages_2eproto();
void protobuf_AssignDesc_connection_5fmessages_2eproto();
void protobuf_ShutdownFile_connection_5fmessages_2eproto();

class BLGetWanInfo;
class BLProfileReqestInfo;
class BLProfileInfo;
class BLGetProfileList;
class BLConnectionTypeMsg;

// ===================================================================

class BLGetWanInfo : public ::google::protobuf::MessageLite {
 public:
  BLGetWanInfo();
  virtual ~BLGetWanInfo();
  
  BLGetWanInfo(const BLGetWanInfo& from);
  
  inline BLGetWanInfo& operator=(const BLGetWanInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BLGetWanInfo& default_instance();
  
  void Swap(BLGetWanInfo* other);
  
  // implements Message ----------------------------------------------
  
  BLGetWanInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BLGetWanInfo& from);
  void MergeFrom(const BLGetWanInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 nRecvBytes = 1;
  inline bool has_nrecvbytes() const;
  inline void clear_nrecvbytes();
  static const int kNRecvBytesFieldNumber = 1;
  inline ::google::protobuf::uint64 nrecvbytes() const;
  inline void set_nrecvbytes(::google::protobuf::uint64 value);
  
  // required uint64 nSendBytes = 2;
  inline bool has_nsendbytes() const;
  inline void clear_nsendbytes();
  static const int kNSendBytesFieldNumber = 2;
  inline ::google::protobuf::uint64 nsendbytes() const;
  inline void set_nsendbytes(::google::protobuf::uint64 value);
  
  // required int32 nState = 3;
  inline bool has_nstate() const;
  inline void clear_nstate();
  static const int kNStateFieldNumber = 3;
  inline ::google::protobuf::int32 nstate() const;
  inline void set_nstate(::google::protobuf::int32 value);
  
  // required uint32 nDuration = 4;
  inline bool has_nduration() const;
  inline void clear_nduration();
  static const int kNDurationFieldNumber = 4;
  inline ::google::protobuf::uint32 nduration() const;
  inline void set_nduration(::google::protobuf::uint32 value);
  
  // required int32 nIPAddrMask = 5;
  inline bool has_nipaddrmask() const;
  inline void clear_nipaddrmask();
  static const int kNIPAddrMaskFieldNumber = 5;
  inline ::google::protobuf::int32 nipaddrmask() const;
  inline void set_nipaddrmask(::google::protobuf::int32 value);
  
  // required string strIPv4Addr = 6;
  inline bool has_stripv4addr() const;
  inline void clear_stripv4addr();
  static const int kStrIPv4AddrFieldNumber = 6;
  inline const ::std::string& stripv4addr() const;
  inline void set_stripv4addr(const ::std::string& value);
  inline void set_stripv4addr(const char* value);
  inline void set_stripv4addr(const char* value, size_t size);
  inline ::std::string* mutable_stripv4addr();
  inline ::std::string* release_stripv4addr();
  
  // required string strIPv6Addr = 7;
  inline bool has_stripv6addr() const;
  inline void clear_stripv6addr();
  static const int kStrIPv6AddrFieldNumber = 7;
  inline const ::std::string& stripv6addr() const;
  inline void set_stripv6addr(const ::std::string& value);
  inline void set_stripv6addr(const char* value);
  inline void set_stripv6addr(const char* value, size_t size);
  inline ::std::string* mutable_stripv6addr();
  inline ::std::string* release_stripv6addr();
  
  // required uint32 nRecvSpeed = 8;
  inline bool has_nrecvspeed() const;
  inline void clear_nrecvspeed();
  static const int kNRecvSpeedFieldNumber = 8;
  inline ::google::protobuf::uint32 nrecvspeed() const;
  inline void set_nrecvspeed(::google::protobuf::uint32 value);
  
  // required uint32 nSendSpeed = 9;
  inline bool has_nsendspeed() const;
  inline void clear_nsendspeed();
  static const int kNSendSpeedFieldNumber = 9;
  inline ::google::protobuf::uint32 nsendspeed() const;
  inline void set_nsendspeed(::google::protobuf::uint32 value);
  
  // required string strProfileName = 10;
  inline bool has_strprofilename() const;
  inline void clear_strprofilename();
  static const int kStrProfileNameFieldNumber = 10;
  inline const ::std::string& strprofilename() const;
  inline void set_strprofilename(const ::std::string& value);
  inline void set_strprofilename(const char* value);
  inline void set_strprofilename(const char* value, size_t size);
  inline ::std::string* mutable_strprofilename();
  inline ::std::string* release_strprofilename();
  
  // @@protoc_insertion_point(class_scope:ConnectionMessages.BLGetWanInfo)
 private:
  inline void set_has_nrecvbytes();
  inline void clear_has_nrecvbytes();
  inline void set_has_nsendbytes();
  inline void clear_has_nsendbytes();
  inline void set_has_nstate();
  inline void clear_has_nstate();
  inline void set_has_nduration();
  inline void clear_has_nduration();
  inline void set_has_nipaddrmask();
  inline void clear_has_nipaddrmask();
  inline void set_has_stripv4addr();
  inline void clear_has_stripv4addr();
  inline void set_has_stripv6addr();
  inline void clear_has_stripv6addr();
  inline void set_has_nrecvspeed();
  inline void clear_has_nrecvspeed();
  inline void set_has_nsendspeed();
  inline void clear_has_nsendspeed();
  inline void set_has_strprofilename();
  inline void clear_has_strprofilename();
  
  ::google::protobuf::uint64 nrecvbytes_;
  ::google::protobuf::uint64 nsendbytes_;
  ::google::protobuf::int32 nstate_;
  ::google::protobuf::uint32 nduration_;
  ::std::string* stripv4addr_;
  ::google::protobuf::int32 nipaddrmask_;
  ::google::protobuf::uint32 nrecvspeed_;
  ::std::string* stripv6addr_;
  ::std::string* strprofilename_;
  ::google::protobuf::uint32 nsendspeed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_connection_5fmessages_2eproto();
  friend void protobuf_AssignDesc_connection_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_connection_5fmessages_2eproto();
  
  void InitAsDefaultInstance();
  static BLGetWanInfo* default_instance_;
};
// -------------------------------------------------------------------

class BLProfileReqestInfo : public ::google::protobuf::MessageLite {
 public:
  BLProfileReqestInfo();
  virtual ~BLProfileReqestInfo();
  
  BLProfileReqestInfo(const BLProfileReqestInfo& from);
  
  inline BLProfileReqestInfo& operator=(const BLProfileReqestInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BLProfileReqestInfo& default_instance();
  
  void Swap(BLProfileReqestInfo* other);
  
  // implements Message ----------------------------------------------
  
  BLProfileReqestInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BLProfileReqestInfo& from);
  void MergeFrom(const BLProfileReqestInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 nProfileId = 1;
  inline bool has_nprofileid() const;
  inline void clear_nprofileid();
  static const int kNProfileIdFieldNumber = 1;
  inline ::google::protobuf::int32 nprofileid() const;
  inline void set_nprofileid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ConnectionMessages.BLProfileReqestInfo)
 private:
  inline void set_has_nprofileid();
  inline void clear_has_nprofileid();
  
  ::google::protobuf::int32 nprofileid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_connection_5fmessages_2eproto();
  friend void protobuf_AssignDesc_connection_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_connection_5fmessages_2eproto();
  
  void InitAsDefaultInstance();
  static BLProfileReqestInfo* default_instance_;
};
// -------------------------------------------------------------------

class BLProfileInfo : public ::google::protobuf::MessageLite {
 public:
  BLProfileInfo();
  virtual ~BLProfileInfo();
  
  BLProfileInfo(const BLProfileInfo& from);
  
  inline BLProfileInfo& operator=(const BLProfileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BLProfileInfo& default_instance();
  
  void Swap(BLProfileInfo* other);
  
  // implements Message ----------------------------------------------
  
  BLProfileInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BLProfileInfo& from);
  void MergeFrom(const BLProfileInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 nProfileId = 1;
  inline bool has_nprofileid() const;
  inline void clear_nprofileid();
  static const int kNProfileIdFieldNumber = 1;
  inline ::google::protobuf::int32 nprofileid() const;
  inline void set_nprofileid(::google::protobuf::int32 value);
  
  // required string strPdpType = 2;
  inline bool has_strpdptype() const;
  inline void clear_strpdptype();
  static const int kStrPdpTypeFieldNumber = 2;
  inline const ::std::string& strpdptype() const;
  inline void set_strpdptype(const ::std::string& value);
  inline void set_strpdptype(const char* value);
  inline void set_strpdptype(const char* value, size_t size);
  inline ::std::string* mutable_strpdptype();
  inline ::std::string* release_strpdptype();
  
  // required string strApn = 3;
  inline bool has_strapn() const;
  inline void clear_strapn();
  static const int kStrApnFieldNumber = 3;
  inline const ::std::string& strapn() const;
  inline void set_strapn(const ::std::string& value);
  inline void set_strapn(const char* value);
  inline void set_strapn(const char* value, size_t size);
  inline ::std::string* mutable_strapn();
  inline ::std::string* release_strapn();
  
  // required string strPdpAddr = 4;
  inline bool has_strpdpaddr() const;
  inline void clear_strpdpaddr();
  static const int kStrPdpAddrFieldNumber = 4;
  inline const ::std::string& strpdpaddr() const;
  inline void set_strpdpaddr(const ::std::string& value);
  inline void set_strpdpaddr(const char* value);
  inline void set_strpdpaddr(const char* value, size_t size);
  inline ::std::string* mutable_strpdpaddr();
  inline ::std::string* release_strpdpaddr();
  
  // required int32 nDComp = 5;
  inline bool has_ndcomp() const;
  inline void clear_ndcomp();
  static const int kNDCompFieldNumber = 5;
  inline ::google::protobuf::int32 ndcomp() const;
  inline void set_ndcomp(::google::protobuf::int32 value);
  
  // required int32 nHComp = 6;
  inline bool has_nhcomp() const;
  inline void clear_nhcomp();
  static const int kNHCompFieldNumber = 6;
  inline ::google::protobuf::int32 nhcomp() const;
  inline void set_nhcomp(::google::protobuf::int32 value);
  
  // required bool bIsActive = 7;
  inline bool has_bisactive() const;
  inline void clear_bisactive();
  static const int kBIsActiveFieldNumber = 7;
  inline bool bisactive() const;
  inline void set_bisactive(bool value);
  
  // required int32 nAuthType = 8;
  inline bool has_nauthtype() const;
  inline void clear_nauthtype();
  static const int kNAuthTypeFieldNumber = 8;
  inline ::google::protobuf::int32 nauthtype() const;
  inline void set_nauthtype(::google::protobuf::int32 value);
  
  // required string strUserName = 9;
  inline bool has_strusername() const;
  inline void clear_strusername();
  static const int kStrUserNameFieldNumber = 9;
  inline const ::std::string& strusername() const;
  inline void set_strusername(const ::std::string& value);
  inline void set_strusername(const char* value);
  inline void set_strusername(const char* value, size_t size);
  inline ::std::string* mutable_strusername();
  inline ::std::string* release_strusername();
  
  // required string strPasswd = 10;
  inline bool has_strpasswd() const;
  inline void clear_strpasswd();
  static const int kStrPasswdFieldNumber = 10;
  inline const ::std::string& strpasswd() const;
  inline void set_strpasswd(const ::std::string& value);
  inline void set_strpasswd(const char* value);
  inline void set_strpasswd(const char* value, size_t size);
  inline ::std::string* mutable_strpasswd();
  inline ::std::string* release_strpasswd();
  
  // required string strProfileName = 11;
  inline bool has_strprofilename() const;
  inline void clear_strprofilename();
  static const int kStrProfileNameFieldNumber = 11;
  inline const ::std::string& strprofilename() const;
  inline void set_strprofilename(const ::std::string& value);
  inline void set_strprofilename(const char* value);
  inline void set_strprofilename(const char* value, size_t size);
  inline ::std::string* mutable_strprofilename();
  inline ::std::string* release_strprofilename();
  
  // required string strDialNumber = 12;
  inline bool has_strdialnumber() const;
  inline void clear_strdialnumber();
  static const int kStrDialNumberFieldNumber = 12;
  inline const ::std::string& strdialnumber() const;
  inline void set_strdialnumber(const ::std::string& value);
  inline void set_strdialnumber(const char* value);
  inline void set_strdialnumber(const char* value, size_t size);
  inline ::std::string* mutable_strdialnumber();
  inline ::std::string* release_strdialnumber();
  
  // required bool bIsPreDefined = 13;
  inline bool has_bispredefined() const;
  inline void clear_bispredefined();
  static const int kBIsPreDefinedFieldNumber = 13;
  inline bool bispredefined() const;
  inline void set_bispredefined(bool value);
  
  // @@protoc_insertion_point(class_scope:ConnectionMessages.BLProfileInfo)
 private:
  inline void set_has_nprofileid();
  inline void clear_has_nprofileid();
  inline void set_has_strpdptype();
  inline void clear_has_strpdptype();
  inline void set_has_strapn();
  inline void clear_has_strapn();
  inline void set_has_strpdpaddr();
  inline void clear_has_strpdpaddr();
  inline void set_has_ndcomp();
  inline void clear_has_ndcomp();
  inline void set_has_nhcomp();
  inline void clear_has_nhcomp();
  inline void set_has_bisactive();
  inline void clear_has_bisactive();
  inline void set_has_nauthtype();
  inline void clear_has_nauthtype();
  inline void set_has_strusername();
  inline void clear_has_strusername();
  inline void set_has_strpasswd();
  inline void clear_has_strpasswd();
  inline void set_has_strprofilename();
  inline void clear_has_strprofilename();
  inline void set_has_strdialnumber();
  inline void clear_has_strdialnumber();
  inline void set_has_bispredefined();
  inline void clear_has_bispredefined();
  
  ::std::string* strpdptype_;
  ::std::string* strapn_;
  ::google::protobuf::int32 nprofileid_;
  ::google::protobuf::int32 ndcomp_;
  ::std::string* strpdpaddr_;
  ::google::protobuf::int32 nhcomp_;
  ::google::protobuf::int32 nauthtype_;
  ::std::string* strusername_;
  ::std::string* strpasswd_;
  ::std::string* strprofilename_;
  ::std::string* strdialnumber_;
  bool bisactive_;
  bool bispredefined_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_connection_5fmessages_2eproto();
  friend void protobuf_AssignDesc_connection_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_connection_5fmessages_2eproto();
  
  void InitAsDefaultInstance();
  static BLProfileInfo* default_instance_;
};
// -------------------------------------------------------------------

class BLGetProfileList : public ::google::protobuf::MessageLite {
 public:
  BLGetProfileList();
  virtual ~BLGetProfileList();
  
  BLGetProfileList(const BLGetProfileList& from);
  
  inline BLGetProfileList& operator=(const BLGetProfileList& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BLGetProfileList& default_instance();
  
  void Swap(BLGetProfileList* other);
  
  // implements Message ----------------------------------------------
  
  BLGetProfileList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BLGetProfileList& from);
  void MergeFrom(const BLGetProfileList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ConnectionMessages.BLProfileInfo profileList = 1;
  inline int profilelist_size() const;
  inline void clear_profilelist();
  static const int kProfileListFieldNumber = 1;
  inline const ::ConnectionMessages::BLProfileInfo& profilelist(int index) const;
  inline ::ConnectionMessages::BLProfileInfo* mutable_profilelist(int index);
  inline ::ConnectionMessages::BLProfileInfo* add_profilelist();
  inline const ::google::protobuf::RepeatedPtrField< ::ConnectionMessages::BLProfileInfo >&
      profilelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConnectionMessages::BLProfileInfo >*
      mutable_profilelist();
  
  // @@protoc_insertion_point(class_scope:ConnectionMessages.BLGetProfileList)
 private:
  
  ::google::protobuf::RepeatedPtrField< ::ConnectionMessages::BLProfileInfo > profilelist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_connection_5fmessages_2eproto();
  friend void protobuf_AssignDesc_connection_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_connection_5fmessages_2eproto();
  
  void InitAsDefaultInstance();
  static BLGetProfileList* default_instance_;
};
// -------------------------------------------------------------------

class BLConnectionTypeMsg : public ::google::protobuf::MessageLite {
 public:
  BLConnectionTypeMsg();
  virtual ~BLConnectionTypeMsg();
  
  BLConnectionTypeMsg(const BLConnectionTypeMsg& from);
  
  inline BLConnectionTypeMsg& operator=(const BLConnectionTypeMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BLConnectionTypeMsg& default_instance();
  
  void Swap(BLConnectionTypeMsg* other);
  
  // implements Message ----------------------------------------------
  
  BLConnectionTypeMsg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BLConnectionTypeMsg& from);
  void MergeFrom(const BLConnectionTypeMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 nPdpType = 1;
  inline bool has_npdptype() const;
  inline void clear_npdptype();
  static const int kNPdpTypeFieldNumber = 1;
  inline ::google::protobuf::int32 npdptype() const;
  inline void set_npdptype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ConnectionMessages.BLConnectionTypeMsg)
 private:
  inline void set_has_npdptype();
  inline void clear_has_npdptype();
  
  ::google::protobuf::int32 npdptype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_connection_5fmessages_2eproto();
  friend void protobuf_AssignDesc_connection_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_connection_5fmessages_2eproto();
  
  void InitAsDefaultInstance();
  static BLConnectionTypeMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// BLGetWanInfo

// required uint64 nRecvBytes = 1;
inline bool BLGetWanInfo::has_nrecvbytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BLGetWanInfo::set_has_nrecvbytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BLGetWanInfo::clear_has_nrecvbytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BLGetWanInfo::clear_nrecvbytes() {
  nrecvbytes_ = GOOGLE_ULONGLONG(0);
  clear_has_nrecvbytes();
}
inline ::google::protobuf::uint64 BLGetWanInfo::nrecvbytes() const {
  return nrecvbytes_;
}
inline void BLGetWanInfo::set_nrecvbytes(::google::protobuf::uint64 value) {
  set_has_nrecvbytes();
  nrecvbytes_ = value;
}

// required uint64 nSendBytes = 2;
inline bool BLGetWanInfo::has_nsendbytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BLGetWanInfo::set_has_nsendbytes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BLGetWanInfo::clear_has_nsendbytes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BLGetWanInfo::clear_nsendbytes() {
  nsendbytes_ = GOOGLE_ULONGLONG(0);
  clear_has_nsendbytes();
}
inline ::google::protobuf::uint64 BLGetWanInfo::nsendbytes() const {
  return nsendbytes_;
}
inline void BLGetWanInfo::set_nsendbytes(::google::protobuf::uint64 value) {
  set_has_nsendbytes();
  nsendbytes_ = value;
}

// required int32 nState = 3;
inline bool BLGetWanInfo::has_nstate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BLGetWanInfo::set_has_nstate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BLGetWanInfo::clear_has_nstate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BLGetWanInfo::clear_nstate() {
  nstate_ = 0;
  clear_has_nstate();
}
inline ::google::protobuf::int32 BLGetWanInfo::nstate() const {
  return nstate_;
}
inline void BLGetWanInfo::set_nstate(::google::protobuf::int32 value) {
  set_has_nstate();
  nstate_ = value;
}

// required uint32 nDuration = 4;
inline bool BLGetWanInfo::has_nduration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BLGetWanInfo::set_has_nduration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BLGetWanInfo::clear_has_nduration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BLGetWanInfo::clear_nduration() {
  nduration_ = 0u;
  clear_has_nduration();
}
inline ::google::protobuf::uint32 BLGetWanInfo::nduration() const {
  return nduration_;
}
inline void BLGetWanInfo::set_nduration(::google::protobuf::uint32 value) {
  set_has_nduration();
  nduration_ = value;
}

// required int32 nIPAddrMask = 5;
inline bool BLGetWanInfo::has_nipaddrmask() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BLGetWanInfo::set_has_nipaddrmask() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BLGetWanInfo::clear_has_nipaddrmask() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BLGetWanInfo::clear_nipaddrmask() {
  nipaddrmask_ = 0;
  clear_has_nipaddrmask();
}
inline ::google::protobuf::int32 BLGetWanInfo::nipaddrmask() const {
  return nipaddrmask_;
}
inline void BLGetWanInfo::set_nipaddrmask(::google::protobuf::int32 value) {
  set_has_nipaddrmask();
  nipaddrmask_ = value;
}

// required string strIPv4Addr = 6;
inline bool BLGetWanInfo::has_stripv4addr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BLGetWanInfo::set_has_stripv4addr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BLGetWanInfo::clear_has_stripv4addr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BLGetWanInfo::clear_stripv4addr() {
  if (stripv4addr_ != &::google::protobuf::internal::kEmptyString) {
    stripv4addr_->clear();
  }
  clear_has_stripv4addr();
}
inline const ::std::string& BLGetWanInfo::stripv4addr() const {
  return *stripv4addr_;
}
inline void BLGetWanInfo::set_stripv4addr(const ::std::string& value) {
  set_has_stripv4addr();
  if (stripv4addr_ == &::google::protobuf::internal::kEmptyString) {
    stripv4addr_ = new ::std::string;
  }
  stripv4addr_->assign(value);
}
inline void BLGetWanInfo::set_stripv4addr(const char* value) {
  set_has_stripv4addr();
  if (stripv4addr_ == &::google::protobuf::internal::kEmptyString) {
    stripv4addr_ = new ::std::string;
  }
  stripv4addr_->assign(value);
}
inline void BLGetWanInfo::set_stripv4addr(const char* value, size_t size) {
  set_has_stripv4addr();
  if (stripv4addr_ == &::google::protobuf::internal::kEmptyString) {
    stripv4addr_ = new ::std::string;
  }
  stripv4addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLGetWanInfo::mutable_stripv4addr() {
  set_has_stripv4addr();
  if (stripv4addr_ == &::google::protobuf::internal::kEmptyString) {
    stripv4addr_ = new ::std::string;
  }
  return stripv4addr_;
}
inline ::std::string* BLGetWanInfo::release_stripv4addr() {
  clear_has_stripv4addr();
  if (stripv4addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stripv4addr_;
    stripv4addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string strIPv6Addr = 7;
inline bool BLGetWanInfo::has_stripv6addr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BLGetWanInfo::set_has_stripv6addr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BLGetWanInfo::clear_has_stripv6addr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BLGetWanInfo::clear_stripv6addr() {
  if (stripv6addr_ != &::google::protobuf::internal::kEmptyString) {
    stripv6addr_->clear();
  }
  clear_has_stripv6addr();
}
inline const ::std::string& BLGetWanInfo::stripv6addr() const {
  return *stripv6addr_;
}
inline void BLGetWanInfo::set_stripv6addr(const ::std::string& value) {
  set_has_stripv6addr();
  if (stripv6addr_ == &::google::protobuf::internal::kEmptyString) {
    stripv6addr_ = new ::std::string;
  }
  stripv6addr_->assign(value);
}
inline void BLGetWanInfo::set_stripv6addr(const char* value) {
  set_has_stripv6addr();
  if (stripv6addr_ == &::google::protobuf::internal::kEmptyString) {
    stripv6addr_ = new ::std::string;
  }
  stripv6addr_->assign(value);
}
inline void BLGetWanInfo::set_stripv6addr(const char* value, size_t size) {
  set_has_stripv6addr();
  if (stripv6addr_ == &::google::protobuf::internal::kEmptyString) {
    stripv6addr_ = new ::std::string;
  }
  stripv6addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLGetWanInfo::mutable_stripv6addr() {
  set_has_stripv6addr();
  if (stripv6addr_ == &::google::protobuf::internal::kEmptyString) {
    stripv6addr_ = new ::std::string;
  }
  return stripv6addr_;
}
inline ::std::string* BLGetWanInfo::release_stripv6addr() {
  clear_has_stripv6addr();
  if (stripv6addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stripv6addr_;
    stripv6addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 nRecvSpeed = 8;
inline bool BLGetWanInfo::has_nrecvspeed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BLGetWanInfo::set_has_nrecvspeed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BLGetWanInfo::clear_has_nrecvspeed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BLGetWanInfo::clear_nrecvspeed() {
  nrecvspeed_ = 0u;
  clear_has_nrecvspeed();
}
inline ::google::protobuf::uint32 BLGetWanInfo::nrecvspeed() const {
  return nrecvspeed_;
}
inline void BLGetWanInfo::set_nrecvspeed(::google::protobuf::uint32 value) {
  set_has_nrecvspeed();
  nrecvspeed_ = value;
}

// required uint32 nSendSpeed = 9;
inline bool BLGetWanInfo::has_nsendspeed() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BLGetWanInfo::set_has_nsendspeed() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BLGetWanInfo::clear_has_nsendspeed() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BLGetWanInfo::clear_nsendspeed() {
  nsendspeed_ = 0u;
  clear_has_nsendspeed();
}
inline ::google::protobuf::uint32 BLGetWanInfo::nsendspeed() const {
  return nsendspeed_;
}
inline void BLGetWanInfo::set_nsendspeed(::google::protobuf::uint32 value) {
  set_has_nsendspeed();
  nsendspeed_ = value;
}

// required string strProfileName = 10;
inline bool BLGetWanInfo::has_strprofilename() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BLGetWanInfo::set_has_strprofilename() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BLGetWanInfo::clear_has_strprofilename() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BLGetWanInfo::clear_strprofilename() {
  if (strprofilename_ != &::google::protobuf::internal::kEmptyString) {
    strprofilename_->clear();
  }
  clear_has_strprofilename();
}
inline const ::std::string& BLGetWanInfo::strprofilename() const {
  return *strprofilename_;
}
inline void BLGetWanInfo::set_strprofilename(const ::std::string& value) {
  set_has_strprofilename();
  if (strprofilename_ == &::google::protobuf::internal::kEmptyString) {
    strprofilename_ = new ::std::string;
  }
  strprofilename_->assign(value);
}
inline void BLGetWanInfo::set_strprofilename(const char* value) {
  set_has_strprofilename();
  if (strprofilename_ == &::google::protobuf::internal::kEmptyString) {
    strprofilename_ = new ::std::string;
  }
  strprofilename_->assign(value);
}
inline void BLGetWanInfo::set_strprofilename(const char* value, size_t size) {
  set_has_strprofilename();
  if (strprofilename_ == &::google::protobuf::internal::kEmptyString) {
    strprofilename_ = new ::std::string;
  }
  strprofilename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLGetWanInfo::mutable_strprofilename() {
  set_has_strprofilename();
  if (strprofilename_ == &::google::protobuf::internal::kEmptyString) {
    strprofilename_ = new ::std::string;
  }
  return strprofilename_;
}
inline ::std::string* BLGetWanInfo::release_strprofilename() {
  clear_has_strprofilename();
  if (strprofilename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strprofilename_;
    strprofilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// BLProfileReqestInfo

// required int32 nProfileId = 1;
inline bool BLProfileReqestInfo::has_nprofileid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BLProfileReqestInfo::set_has_nprofileid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BLProfileReqestInfo::clear_has_nprofileid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BLProfileReqestInfo::clear_nprofileid() {
  nprofileid_ = 0;
  clear_has_nprofileid();
}
inline ::google::protobuf::int32 BLProfileReqestInfo::nprofileid() const {
  return nprofileid_;
}
inline void BLProfileReqestInfo::set_nprofileid(::google::protobuf::int32 value) {
  set_has_nprofileid();
  nprofileid_ = value;
}

// -------------------------------------------------------------------

// BLProfileInfo

// required int32 nProfileId = 1;
inline bool BLProfileInfo::has_nprofileid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BLProfileInfo::set_has_nprofileid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BLProfileInfo::clear_has_nprofileid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BLProfileInfo::clear_nprofileid() {
  nprofileid_ = 0;
  clear_has_nprofileid();
}
inline ::google::protobuf::int32 BLProfileInfo::nprofileid() const {
  return nprofileid_;
}
inline void BLProfileInfo::set_nprofileid(::google::protobuf::int32 value) {
  set_has_nprofileid();
  nprofileid_ = value;
}

// required string strPdpType = 2;
inline bool BLProfileInfo::has_strpdptype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BLProfileInfo::set_has_strpdptype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BLProfileInfo::clear_has_strpdptype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BLProfileInfo::clear_strpdptype() {
  if (strpdptype_ != &::google::protobuf::internal::kEmptyString) {
    strpdptype_->clear();
  }
  clear_has_strpdptype();
}
inline const ::std::string& BLProfileInfo::strpdptype() const {
  return *strpdptype_;
}
inline void BLProfileInfo::set_strpdptype(const ::std::string& value) {
  set_has_strpdptype();
  if (strpdptype_ == &::google::protobuf::internal::kEmptyString) {
    strpdptype_ = new ::std::string;
  }
  strpdptype_->assign(value);
}
inline void BLProfileInfo::set_strpdptype(const char* value) {
  set_has_strpdptype();
  if (strpdptype_ == &::google::protobuf::internal::kEmptyString) {
    strpdptype_ = new ::std::string;
  }
  strpdptype_->assign(value);
}
inline void BLProfileInfo::set_strpdptype(const char* value, size_t size) {
  set_has_strpdptype();
  if (strpdptype_ == &::google::protobuf::internal::kEmptyString) {
    strpdptype_ = new ::std::string;
  }
  strpdptype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLProfileInfo::mutable_strpdptype() {
  set_has_strpdptype();
  if (strpdptype_ == &::google::protobuf::internal::kEmptyString) {
    strpdptype_ = new ::std::string;
  }
  return strpdptype_;
}
inline ::std::string* BLProfileInfo::release_strpdptype() {
  clear_has_strpdptype();
  if (strpdptype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strpdptype_;
    strpdptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string strApn = 3;
inline bool BLProfileInfo::has_strapn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BLProfileInfo::set_has_strapn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BLProfileInfo::clear_has_strapn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BLProfileInfo::clear_strapn() {
  if (strapn_ != &::google::protobuf::internal::kEmptyString) {
    strapn_->clear();
  }
  clear_has_strapn();
}
inline const ::std::string& BLProfileInfo::strapn() const {
  return *strapn_;
}
inline void BLProfileInfo::set_strapn(const ::std::string& value) {
  set_has_strapn();
  if (strapn_ == &::google::protobuf::internal::kEmptyString) {
    strapn_ = new ::std::string;
  }
  strapn_->assign(value);
}
inline void BLProfileInfo::set_strapn(const char* value) {
  set_has_strapn();
  if (strapn_ == &::google::protobuf::internal::kEmptyString) {
    strapn_ = new ::std::string;
  }
  strapn_->assign(value);
}
inline void BLProfileInfo::set_strapn(const char* value, size_t size) {
  set_has_strapn();
  if (strapn_ == &::google::protobuf::internal::kEmptyString) {
    strapn_ = new ::std::string;
  }
  strapn_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLProfileInfo::mutable_strapn() {
  set_has_strapn();
  if (strapn_ == &::google::protobuf::internal::kEmptyString) {
    strapn_ = new ::std::string;
  }
  return strapn_;
}
inline ::std::string* BLProfileInfo::release_strapn() {
  clear_has_strapn();
  if (strapn_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strapn_;
    strapn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string strPdpAddr = 4;
inline bool BLProfileInfo::has_strpdpaddr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BLProfileInfo::set_has_strpdpaddr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BLProfileInfo::clear_has_strpdpaddr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BLProfileInfo::clear_strpdpaddr() {
  if (strpdpaddr_ != &::google::protobuf::internal::kEmptyString) {
    strpdpaddr_->clear();
  }
  clear_has_strpdpaddr();
}
inline const ::std::string& BLProfileInfo::strpdpaddr() const {
  return *strpdpaddr_;
}
inline void BLProfileInfo::set_strpdpaddr(const ::std::string& value) {
  set_has_strpdpaddr();
  if (strpdpaddr_ == &::google::protobuf::internal::kEmptyString) {
    strpdpaddr_ = new ::std::string;
  }
  strpdpaddr_->assign(value);
}
inline void BLProfileInfo::set_strpdpaddr(const char* value) {
  set_has_strpdpaddr();
  if (strpdpaddr_ == &::google::protobuf::internal::kEmptyString) {
    strpdpaddr_ = new ::std::string;
  }
  strpdpaddr_->assign(value);
}
inline void BLProfileInfo::set_strpdpaddr(const char* value, size_t size) {
  set_has_strpdpaddr();
  if (strpdpaddr_ == &::google::protobuf::internal::kEmptyString) {
    strpdpaddr_ = new ::std::string;
  }
  strpdpaddr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLProfileInfo::mutable_strpdpaddr() {
  set_has_strpdpaddr();
  if (strpdpaddr_ == &::google::protobuf::internal::kEmptyString) {
    strpdpaddr_ = new ::std::string;
  }
  return strpdpaddr_;
}
inline ::std::string* BLProfileInfo::release_strpdpaddr() {
  clear_has_strpdpaddr();
  if (strpdpaddr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strpdpaddr_;
    strpdpaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 nDComp = 5;
inline bool BLProfileInfo::has_ndcomp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BLProfileInfo::set_has_ndcomp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BLProfileInfo::clear_has_ndcomp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BLProfileInfo::clear_ndcomp() {
  ndcomp_ = 0;
  clear_has_ndcomp();
}
inline ::google::protobuf::int32 BLProfileInfo::ndcomp() const {
  return ndcomp_;
}
inline void BLProfileInfo::set_ndcomp(::google::protobuf::int32 value) {
  set_has_ndcomp();
  ndcomp_ = value;
}

// required int32 nHComp = 6;
inline bool BLProfileInfo::has_nhcomp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BLProfileInfo::set_has_nhcomp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BLProfileInfo::clear_has_nhcomp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BLProfileInfo::clear_nhcomp() {
  nhcomp_ = 0;
  clear_has_nhcomp();
}
inline ::google::protobuf::int32 BLProfileInfo::nhcomp() const {
  return nhcomp_;
}
inline void BLProfileInfo::set_nhcomp(::google::protobuf::int32 value) {
  set_has_nhcomp();
  nhcomp_ = value;
}

// required bool bIsActive = 7;
inline bool BLProfileInfo::has_bisactive() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BLProfileInfo::set_has_bisactive() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BLProfileInfo::clear_has_bisactive() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BLProfileInfo::clear_bisactive() {
  bisactive_ = false;
  clear_has_bisactive();
}
inline bool BLProfileInfo::bisactive() const {
  return bisactive_;
}
inline void BLProfileInfo::set_bisactive(bool value) {
  set_has_bisactive();
  bisactive_ = value;
}

// required int32 nAuthType = 8;
inline bool BLProfileInfo::has_nauthtype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BLProfileInfo::set_has_nauthtype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BLProfileInfo::clear_has_nauthtype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BLProfileInfo::clear_nauthtype() {
  nauthtype_ = 0;
  clear_has_nauthtype();
}
inline ::google::protobuf::int32 BLProfileInfo::nauthtype() const {
  return nauthtype_;
}
inline void BLProfileInfo::set_nauthtype(::google::protobuf::int32 value) {
  set_has_nauthtype();
  nauthtype_ = value;
}

// required string strUserName = 9;
inline bool BLProfileInfo::has_strusername() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BLProfileInfo::set_has_strusername() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BLProfileInfo::clear_has_strusername() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BLProfileInfo::clear_strusername() {
  if (strusername_ != &::google::protobuf::internal::kEmptyString) {
    strusername_->clear();
  }
  clear_has_strusername();
}
inline const ::std::string& BLProfileInfo::strusername() const {
  return *strusername_;
}
inline void BLProfileInfo::set_strusername(const ::std::string& value) {
  set_has_strusername();
  if (strusername_ == &::google::protobuf::internal::kEmptyString) {
    strusername_ = new ::std::string;
  }
  strusername_->assign(value);
}
inline void BLProfileInfo::set_strusername(const char* value) {
  set_has_strusername();
  if (strusername_ == &::google::protobuf::internal::kEmptyString) {
    strusername_ = new ::std::string;
  }
  strusername_->assign(value);
}
inline void BLProfileInfo::set_strusername(const char* value, size_t size) {
  set_has_strusername();
  if (strusername_ == &::google::protobuf::internal::kEmptyString) {
    strusername_ = new ::std::string;
  }
  strusername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLProfileInfo::mutable_strusername() {
  set_has_strusername();
  if (strusername_ == &::google::protobuf::internal::kEmptyString) {
    strusername_ = new ::std::string;
  }
  return strusername_;
}
inline ::std::string* BLProfileInfo::release_strusername() {
  clear_has_strusername();
  if (strusername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strusername_;
    strusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string strPasswd = 10;
inline bool BLProfileInfo::has_strpasswd() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BLProfileInfo::set_has_strpasswd() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BLProfileInfo::clear_has_strpasswd() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BLProfileInfo::clear_strpasswd() {
  if (strpasswd_ != &::google::protobuf::internal::kEmptyString) {
    strpasswd_->clear();
  }
  clear_has_strpasswd();
}
inline const ::std::string& BLProfileInfo::strpasswd() const {
  return *strpasswd_;
}
inline void BLProfileInfo::set_strpasswd(const ::std::string& value) {
  set_has_strpasswd();
  if (strpasswd_ == &::google::protobuf::internal::kEmptyString) {
    strpasswd_ = new ::std::string;
  }
  strpasswd_->assign(value);
}
inline void BLProfileInfo::set_strpasswd(const char* value) {
  set_has_strpasswd();
  if (strpasswd_ == &::google::protobuf::internal::kEmptyString) {
    strpasswd_ = new ::std::string;
  }
  strpasswd_->assign(value);
}
inline void BLProfileInfo::set_strpasswd(const char* value, size_t size) {
  set_has_strpasswd();
  if (strpasswd_ == &::google::protobuf::internal::kEmptyString) {
    strpasswd_ = new ::std::string;
  }
  strpasswd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLProfileInfo::mutable_strpasswd() {
  set_has_strpasswd();
  if (strpasswd_ == &::google::protobuf::internal::kEmptyString) {
    strpasswd_ = new ::std::string;
  }
  return strpasswd_;
}
inline ::std::string* BLProfileInfo::release_strpasswd() {
  clear_has_strpasswd();
  if (strpasswd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strpasswd_;
    strpasswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string strProfileName = 11;
inline bool BLProfileInfo::has_strprofilename() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BLProfileInfo::set_has_strprofilename() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BLProfileInfo::clear_has_strprofilename() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BLProfileInfo::clear_strprofilename() {
  if (strprofilename_ != &::google::protobuf::internal::kEmptyString) {
    strprofilename_->clear();
  }
  clear_has_strprofilename();
}
inline const ::std::string& BLProfileInfo::strprofilename() const {
  return *strprofilename_;
}
inline void BLProfileInfo::set_strprofilename(const ::std::string& value) {
  set_has_strprofilename();
  if (strprofilename_ == &::google::protobuf::internal::kEmptyString) {
    strprofilename_ = new ::std::string;
  }
  strprofilename_->assign(value);
}
inline void BLProfileInfo::set_strprofilename(const char* value) {
  set_has_strprofilename();
  if (strprofilename_ == &::google::protobuf::internal::kEmptyString) {
    strprofilename_ = new ::std::string;
  }
  strprofilename_->assign(value);
}
inline void BLProfileInfo::set_strprofilename(const char* value, size_t size) {
  set_has_strprofilename();
  if (strprofilename_ == &::google::protobuf::internal::kEmptyString) {
    strprofilename_ = new ::std::string;
  }
  strprofilename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLProfileInfo::mutable_strprofilename() {
  set_has_strprofilename();
  if (strprofilename_ == &::google::protobuf::internal::kEmptyString) {
    strprofilename_ = new ::std::string;
  }
  return strprofilename_;
}
inline ::std::string* BLProfileInfo::release_strprofilename() {
  clear_has_strprofilename();
  if (strprofilename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strprofilename_;
    strprofilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string strDialNumber = 12;
inline bool BLProfileInfo::has_strdialnumber() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BLProfileInfo::set_has_strdialnumber() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BLProfileInfo::clear_has_strdialnumber() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BLProfileInfo::clear_strdialnumber() {
  if (strdialnumber_ != &::google::protobuf::internal::kEmptyString) {
    strdialnumber_->clear();
  }
  clear_has_strdialnumber();
}
inline const ::std::string& BLProfileInfo::strdialnumber() const {
  return *strdialnumber_;
}
inline void BLProfileInfo::set_strdialnumber(const ::std::string& value) {
  set_has_strdialnumber();
  if (strdialnumber_ == &::google::protobuf::internal::kEmptyString) {
    strdialnumber_ = new ::std::string;
  }
  strdialnumber_->assign(value);
}
inline void BLProfileInfo::set_strdialnumber(const char* value) {
  set_has_strdialnumber();
  if (strdialnumber_ == &::google::protobuf::internal::kEmptyString) {
    strdialnumber_ = new ::std::string;
  }
  strdialnumber_->assign(value);
}
inline void BLProfileInfo::set_strdialnumber(const char* value, size_t size) {
  set_has_strdialnumber();
  if (strdialnumber_ == &::google::protobuf::internal::kEmptyString) {
    strdialnumber_ = new ::std::string;
  }
  strdialnumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLProfileInfo::mutable_strdialnumber() {
  set_has_strdialnumber();
  if (strdialnumber_ == &::google::protobuf::internal::kEmptyString) {
    strdialnumber_ = new ::std::string;
  }
  return strdialnumber_;
}
inline ::std::string* BLProfileInfo::release_strdialnumber() {
  clear_has_strdialnumber();
  if (strdialnumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strdialnumber_;
    strdialnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool bIsPreDefined = 13;
inline bool BLProfileInfo::has_bispredefined() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BLProfileInfo::set_has_bispredefined() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BLProfileInfo::clear_has_bispredefined() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BLProfileInfo::clear_bispredefined() {
  bispredefined_ = false;
  clear_has_bispredefined();
}
inline bool BLProfileInfo::bispredefined() const {
  return bispredefined_;
}
inline void BLProfileInfo::set_bispredefined(bool value) {
  set_has_bispredefined();
  bispredefined_ = value;
}

// -------------------------------------------------------------------

// BLGetProfileList

// repeated .ConnectionMessages.BLProfileInfo profileList = 1;
inline int BLGetProfileList::profilelist_size() const {
  return profilelist_.size();
}
inline void BLGetProfileList::clear_profilelist() {
  profilelist_.Clear();
}
inline const ::ConnectionMessages::BLProfileInfo& BLGetProfileList::profilelist(int index) const {
  return profilelist_.Get(index);
}
inline ::ConnectionMessages::BLProfileInfo* BLGetProfileList::mutable_profilelist(int index) {
  return profilelist_.Mutable(index);
}
inline ::ConnectionMessages::BLProfileInfo* BLGetProfileList::add_profilelist() {
  return profilelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConnectionMessages::BLProfileInfo >&
BLGetProfileList::profilelist() const {
  return profilelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConnectionMessages::BLProfileInfo >*
BLGetProfileList::mutable_profilelist() {
  return &profilelist_;
}

// -------------------------------------------------------------------

// BLConnectionTypeMsg

// required int32 nPdpType = 1;
inline bool BLConnectionTypeMsg::has_npdptype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BLConnectionTypeMsg::set_has_npdptype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BLConnectionTypeMsg::clear_has_npdptype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BLConnectionTypeMsg::clear_npdptype() {
  npdptype_ = 0;
  clear_has_npdptype();
}
inline ::google::protobuf::int32 BLConnectionTypeMsg::npdptype() const {
  return npdptype_;
}
inline void BLConnectionTypeMsg::set_npdptype(::google::protobuf::int32 value) {
  set_has_npdptype();
  npdptype_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConnectionMessages

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_connection_5fmessages_2eproto__INCLUDED
