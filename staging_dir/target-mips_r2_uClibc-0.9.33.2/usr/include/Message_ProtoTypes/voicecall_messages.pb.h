// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: voicecall_messages.proto

#ifndef PROTOBUF_voicecall_5fmessages_2eproto__INCLUDED
#define PROTOBUF_voicecall_5fmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace VoiceCallMessages {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_voicecall_5fmessages_2eproto();
void protobuf_AssignDesc_voicecall_5fmessages_2eproto();
void protobuf_ShutdownFile_voicecall_5fmessages_2eproto();

class BLVoiceCallCommon;
class BLVoiceCallGetState;
class BLCallLogItem;
class BLCallLogList;
class BLCallLogCommon;
class BLVoiceCallJCinfo;

// ===================================================================

class BLVoiceCallCommon : public ::google::protobuf::MessageLite {
 public:
  BLVoiceCallCommon();
  virtual ~BLVoiceCallCommon();
  
  BLVoiceCallCommon(const BLVoiceCallCommon& from);
  
  inline BLVoiceCallCommon& operator=(const BLVoiceCallCommon& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BLVoiceCallCommon& default_instance();
  
  void Swap(BLVoiceCallCommon* other);
  
  // implements Message ----------------------------------------------
  
  BLVoiceCallCommon* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BLVoiceCallCommon& from);
  void MergeFrom(const BLVoiceCallCommon& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string strNumber = 1;
  inline bool has_strnumber() const;
  inline void clear_strnumber();
  static const int kStrNumberFieldNumber = 1;
  inline const ::std::string& strnumber() const;
  inline void set_strnumber(const ::std::string& value);
  inline void set_strnumber(const char* value);
  inline void set_strnumber(const char* value, size_t size);
  inline ::std::string* mutable_strnumber();
  inline ::std::string* release_strnumber();
  
  // optional string strDTMF = 2;
  inline bool has_strdtmf() const;
  inline void clear_strdtmf();
  static const int kStrDTMFFieldNumber = 2;
  inline const ::std::string& strdtmf() const;
  inline void set_strdtmf(const ::std::string& value);
  inline void set_strdtmf(const char* value);
  inline void set_strdtmf(const char* value, size_t size);
  inline ::std::string* mutable_strdtmf();
  inline ::std::string* release_strdtmf();
  
  // @@protoc_insertion_point(class_scope:VoiceCallMessages.BLVoiceCallCommon)
 private:
  inline void set_has_strnumber();
  inline void clear_has_strnumber();
  inline void set_has_strdtmf();
  inline void clear_has_strdtmf();
  
  ::std::string* strnumber_;
  ::std::string* strdtmf_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_voicecall_5fmessages_2eproto();
  friend void protobuf_AssignDesc_voicecall_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_voicecall_5fmessages_2eproto();
  
  void InitAsDefaultInstance();
  static BLVoiceCallCommon* default_instance_;
};
// -------------------------------------------------------------------

class BLVoiceCallGetState : public ::google::protobuf::MessageLite {
 public:
  BLVoiceCallGetState();
  virtual ~BLVoiceCallGetState();
  
  BLVoiceCallGetState(const BLVoiceCallGetState& from);
  
  inline BLVoiceCallGetState& operator=(const BLVoiceCallGetState& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BLVoiceCallGetState& default_instance();
  
  void Swap(BLVoiceCallGetState* other);
  
  // implements Message ----------------------------------------------
  
  BLVoiceCallGetState* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BLVoiceCallGetState& from);
  void MergeFrom(const BLVoiceCallGetState& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 nCallState = 1;
  inline bool has_ncallstate() const;
  inline void clear_ncallstate();
  static const int kNCallStateFieldNumber = 1;
  inline ::google::protobuf::int32 ncallstate() const;
  inline void set_ncallstate(::google::protobuf::int32 value);
  
  // required string strNumber = 2;
  inline bool has_strnumber() const;
  inline void clear_strnumber();
  static const int kStrNumberFieldNumber = 2;
  inline const ::std::string& strnumber() const;
  inline void set_strnumber(const ::std::string& value);
  inline void set_strnumber(const char* value);
  inline void set_strnumber(const char* value, size_t size);
  inline ::std::string* mutable_strnumber();
  inline ::std::string* release_strnumber();
  
  // @@protoc_insertion_point(class_scope:VoiceCallMessages.BLVoiceCallGetState)
 private:
  inline void set_has_ncallstate();
  inline void clear_has_ncallstate();
  inline void set_has_strnumber();
  inline void clear_has_strnumber();
  
  ::std::string* strnumber_;
  ::google::protobuf::int32 ncallstate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_voicecall_5fmessages_2eproto();
  friend void protobuf_AssignDesc_voicecall_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_voicecall_5fmessages_2eproto();
  
  void InitAsDefaultInstance();
  static BLVoiceCallGetState* default_instance_;
};
// -------------------------------------------------------------------

class BLCallLogItem : public ::google::protobuf::MessageLite {
 public:
  BLCallLogItem();
  virtual ~BLCallLogItem();
  
  BLCallLogItem(const BLCallLogItem& from);
  
  inline BLCallLogItem& operator=(const BLCallLogItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BLCallLogItem& default_instance();
  
  void Swap(BLCallLogItem* other);
  
  // implements Message ----------------------------------------------
  
  BLCallLogItem* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BLCallLogItem& from);
  void MergeFrom(const BLCallLogItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 nId = 1;
  inline bool has_nid() const;
  inline void clear_nid();
  static const int kNIdFieldNumber = 1;
  inline ::google::protobuf::int32 nid() const;
  inline void set_nid(::google::protobuf::int32 value);
  
  // required string strTelNumber = 2;
  inline bool has_strtelnumber() const;
  inline void clear_strtelnumber();
  static const int kStrTelNumberFieldNumber = 2;
  inline const ::std::string& strtelnumber() const;
  inline void set_strtelnumber(const ::std::string& value);
  inline void set_strtelnumber(const char* value);
  inline void set_strtelnumber(const char* value, size_t size);
  inline ::std::string* mutable_strtelnumber();
  inline ::std::string* release_strtelnumber();
  
  // required string strTelName = 3;
  inline bool has_strtelname() const;
  inline void clear_strtelname();
  static const int kStrTelNameFieldNumber = 3;
  inline const ::std::string& strtelname() const;
  inline void set_strtelname(const ::std::string& value);
  inline void set_strtelname(const char* value);
  inline void set_strtelname(const char* value, size_t size);
  inline ::std::string* mutable_strtelname();
  inline ::std::string* release_strtelname();
  
  // required int32 nStartTime = 4;
  inline bool has_nstarttime() const;
  inline void clear_nstarttime();
  static const int kNStartTimeFieldNumber = 4;
  inline ::google::protobuf::int32 nstarttime() const;
  inline void set_nstarttime(::google::protobuf::int32 value);
  
  // required int32 nDuration = 5;
  inline bool has_nduration() const;
  inline void clear_nduration();
  static const int kNDurationFieldNumber = 5;
  inline ::google::protobuf::int32 nduration() const;
  inline void set_nduration(::google::protobuf::int32 value);
  
  // required int32 nType = 6;
  inline bool has_ntype() const;
  inline void clear_ntype();
  static const int kNTypeFieldNumber = 6;
  inline ::google::protobuf::int32 ntype() const;
  inline void set_ntype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:VoiceCallMessages.BLCallLogItem)
 private:
  inline void set_has_nid();
  inline void clear_has_nid();
  inline void set_has_strtelnumber();
  inline void clear_has_strtelnumber();
  inline void set_has_strtelname();
  inline void clear_has_strtelname();
  inline void set_has_nstarttime();
  inline void clear_has_nstarttime();
  inline void set_has_nduration();
  inline void clear_has_nduration();
  inline void set_has_ntype();
  inline void clear_has_ntype();
  
  ::std::string* strtelnumber_;
  ::google::protobuf::int32 nid_;
  ::google::protobuf::int32 nstarttime_;
  ::std::string* strtelname_;
  ::google::protobuf::int32 nduration_;
  ::google::protobuf::int32 ntype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_voicecall_5fmessages_2eproto();
  friend void protobuf_AssignDesc_voicecall_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_voicecall_5fmessages_2eproto();
  
  void InitAsDefaultInstance();
  static BLCallLogItem* default_instance_;
};
// -------------------------------------------------------------------

class BLCallLogList : public ::google::protobuf::MessageLite {
 public:
  BLCallLogList();
  virtual ~BLCallLogList();
  
  BLCallLogList(const BLCallLogList& from);
  
  inline BLCallLogList& operator=(const BLCallLogList& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BLCallLogList& default_instance();
  
  void Swap(BLCallLogList* other);
  
  // implements Message ----------------------------------------------
  
  BLCallLogList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BLCallLogList& from);
  void MergeFrom(const BLCallLogList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .VoiceCallMessages.BLCallLogItem callLogList = 1;
  inline int callloglist_size() const;
  inline void clear_callloglist();
  static const int kCallLogListFieldNumber = 1;
  inline const ::VoiceCallMessages::BLCallLogItem& callloglist(int index) const;
  inline ::VoiceCallMessages::BLCallLogItem* mutable_callloglist(int index);
  inline ::VoiceCallMessages::BLCallLogItem* add_callloglist();
  inline const ::google::protobuf::RepeatedPtrField< ::VoiceCallMessages::BLCallLogItem >&
      callloglist() const;
  inline ::google::protobuf::RepeatedPtrField< ::VoiceCallMessages::BLCallLogItem >*
      mutable_callloglist();
  
  // @@protoc_insertion_point(class_scope:VoiceCallMessages.BLCallLogList)
 private:
  
  ::google::protobuf::RepeatedPtrField< ::VoiceCallMessages::BLCallLogItem > callloglist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_voicecall_5fmessages_2eproto();
  friend void protobuf_AssignDesc_voicecall_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_voicecall_5fmessages_2eproto();
  
  void InitAsDefaultInstance();
  static BLCallLogList* default_instance_;
};
// -------------------------------------------------------------------

class BLCallLogCommon : public ::google::protobuf::MessageLite {
 public:
  BLCallLogCommon();
  virtual ~BLCallLogCommon();
  
  BLCallLogCommon(const BLCallLogCommon& from);
  
  inline BLCallLogCommon& operator=(const BLCallLogCommon& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BLCallLogCommon& default_instance();
  
  void Swap(BLCallLogCommon* other);
  
  // implements Message ----------------------------------------------
  
  BLCallLogCommon* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BLCallLogCommon& from);
  void MergeFrom(const BLCallLogCommon& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 nId = 1;
  inline bool has_nid() const;
  inline void clear_nid();
  static const int kNIdFieldNumber = 1;
  inline ::google::protobuf::int32 nid() const;
  inline void set_nid(::google::protobuf::int32 value);
  
  // optional int32 nType = 2;
  inline bool has_ntype() const;
  inline void clear_ntype();
  static const int kNTypeFieldNumber = 2;
  inline ::google::protobuf::int32 ntype() const;
  inline void set_ntype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:VoiceCallMessages.BLCallLogCommon)
 private:
  inline void set_has_nid();
  inline void clear_has_nid();
  inline void set_has_ntype();
  inline void clear_has_ntype();
  
  ::google::protobuf::int32 nid_;
  ::google::protobuf::int32 ntype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_voicecall_5fmessages_2eproto();
  friend void protobuf_AssignDesc_voicecall_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_voicecall_5fmessages_2eproto();
  
  void InitAsDefaultInstance();
  static BLCallLogCommon* default_instance_;
};
// -------------------------------------------------------------------

class BLVoiceCallJCinfo : public ::google::protobuf::MessageLite {
 public:
  BLVoiceCallJCinfo();
  virtual ~BLVoiceCallJCinfo();
  
  BLVoiceCallJCinfo(const BLVoiceCallJCinfo& from);
  
  inline BLVoiceCallJCinfo& operator=(const BLVoiceCallJCinfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BLVoiceCallJCinfo& default_instance();
  
  void Swap(BLVoiceCallJCinfo* other);
  
  // implements Message ----------------------------------------------
  
  BLVoiceCallJCinfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BLVoiceCallJCinfo& from);
  void MergeFrom(const BLVoiceCallJCinfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 nCallId = 1;
  inline bool has_ncallid() const;
  inline void clear_ncallid();
  static const int kNCallIdFieldNumber = 1;
  inline ::google::protobuf::int32 ncallid() const;
  inline void set_ncallid(::google::protobuf::int32 value);
  
  // optional int32 nCallType = 2;
  inline bool has_ncalltype() const;
  inline void clear_ncalltype();
  static const int kNCallTypeFieldNumber = 2;
  inline ::google::protobuf::int32 ncalltype() const;
  inline void set_ncalltype(::google::protobuf::int32 value);
  
  // optional int32 nCallState = 3;
  inline bool has_ncallstate() const;
  inline void clear_ncallstate();
  static const int kNCallStateFieldNumber = 3;
  inline ::google::protobuf::int32 ncallstate() const;
  inline void set_ncallstate(::google::protobuf::int32 value);
  
  // optional int32 nDirect = 4;
  inline bool has_ndirect() const;
  inline void clear_ndirect();
  static const int kNDirectFieldNumber = 4;
  inline ::google::protobuf::int32 ndirect() const;
  inline void set_ndirect(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:VoiceCallMessages.BLVoiceCallJCinfo)
 private:
  inline void set_has_ncallid();
  inline void clear_has_ncallid();
  inline void set_has_ncalltype();
  inline void clear_has_ncalltype();
  inline void set_has_ncallstate();
  inline void clear_has_ncallstate();
  inline void set_has_ndirect();
  inline void clear_has_ndirect();
  
  ::google::protobuf::int32 ncallid_;
  ::google::protobuf::int32 ncalltype_;
  ::google::protobuf::int32 ncallstate_;
  ::google::protobuf::int32 ndirect_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_voicecall_5fmessages_2eproto();
  friend void protobuf_AssignDesc_voicecall_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_voicecall_5fmessages_2eproto();
  
  void InitAsDefaultInstance();
  static BLVoiceCallJCinfo* default_instance_;
};
// ===================================================================


// ===================================================================

// BLVoiceCallCommon

// optional string strNumber = 1;
inline bool BLVoiceCallCommon::has_strnumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BLVoiceCallCommon::set_has_strnumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BLVoiceCallCommon::clear_has_strnumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BLVoiceCallCommon::clear_strnumber() {
  if (strnumber_ != &::google::protobuf::internal::kEmptyString) {
    strnumber_->clear();
  }
  clear_has_strnumber();
}
inline const ::std::string& BLVoiceCallCommon::strnumber() const {
  return *strnumber_;
}
inline void BLVoiceCallCommon::set_strnumber(const ::std::string& value) {
  set_has_strnumber();
  if (strnumber_ == &::google::protobuf::internal::kEmptyString) {
    strnumber_ = new ::std::string;
  }
  strnumber_->assign(value);
}
inline void BLVoiceCallCommon::set_strnumber(const char* value) {
  set_has_strnumber();
  if (strnumber_ == &::google::protobuf::internal::kEmptyString) {
    strnumber_ = new ::std::string;
  }
  strnumber_->assign(value);
}
inline void BLVoiceCallCommon::set_strnumber(const char* value, size_t size) {
  set_has_strnumber();
  if (strnumber_ == &::google::protobuf::internal::kEmptyString) {
    strnumber_ = new ::std::string;
  }
  strnumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLVoiceCallCommon::mutable_strnumber() {
  set_has_strnumber();
  if (strnumber_ == &::google::protobuf::internal::kEmptyString) {
    strnumber_ = new ::std::string;
  }
  return strnumber_;
}
inline ::std::string* BLVoiceCallCommon::release_strnumber() {
  clear_has_strnumber();
  if (strnumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strnumber_;
    strnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string strDTMF = 2;
inline bool BLVoiceCallCommon::has_strdtmf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BLVoiceCallCommon::set_has_strdtmf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BLVoiceCallCommon::clear_has_strdtmf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BLVoiceCallCommon::clear_strdtmf() {
  if (strdtmf_ != &::google::protobuf::internal::kEmptyString) {
    strdtmf_->clear();
  }
  clear_has_strdtmf();
}
inline const ::std::string& BLVoiceCallCommon::strdtmf() const {
  return *strdtmf_;
}
inline void BLVoiceCallCommon::set_strdtmf(const ::std::string& value) {
  set_has_strdtmf();
  if (strdtmf_ == &::google::protobuf::internal::kEmptyString) {
    strdtmf_ = new ::std::string;
  }
  strdtmf_->assign(value);
}
inline void BLVoiceCallCommon::set_strdtmf(const char* value) {
  set_has_strdtmf();
  if (strdtmf_ == &::google::protobuf::internal::kEmptyString) {
    strdtmf_ = new ::std::string;
  }
  strdtmf_->assign(value);
}
inline void BLVoiceCallCommon::set_strdtmf(const char* value, size_t size) {
  set_has_strdtmf();
  if (strdtmf_ == &::google::protobuf::internal::kEmptyString) {
    strdtmf_ = new ::std::string;
  }
  strdtmf_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLVoiceCallCommon::mutable_strdtmf() {
  set_has_strdtmf();
  if (strdtmf_ == &::google::protobuf::internal::kEmptyString) {
    strdtmf_ = new ::std::string;
  }
  return strdtmf_;
}
inline ::std::string* BLVoiceCallCommon::release_strdtmf() {
  clear_has_strdtmf();
  if (strdtmf_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strdtmf_;
    strdtmf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// BLVoiceCallGetState

// required int32 nCallState = 1;
inline bool BLVoiceCallGetState::has_ncallstate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BLVoiceCallGetState::set_has_ncallstate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BLVoiceCallGetState::clear_has_ncallstate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BLVoiceCallGetState::clear_ncallstate() {
  ncallstate_ = 0;
  clear_has_ncallstate();
}
inline ::google::protobuf::int32 BLVoiceCallGetState::ncallstate() const {
  return ncallstate_;
}
inline void BLVoiceCallGetState::set_ncallstate(::google::protobuf::int32 value) {
  set_has_ncallstate();
  ncallstate_ = value;
}

// required string strNumber = 2;
inline bool BLVoiceCallGetState::has_strnumber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BLVoiceCallGetState::set_has_strnumber() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BLVoiceCallGetState::clear_has_strnumber() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BLVoiceCallGetState::clear_strnumber() {
  if (strnumber_ != &::google::protobuf::internal::kEmptyString) {
    strnumber_->clear();
  }
  clear_has_strnumber();
}
inline const ::std::string& BLVoiceCallGetState::strnumber() const {
  return *strnumber_;
}
inline void BLVoiceCallGetState::set_strnumber(const ::std::string& value) {
  set_has_strnumber();
  if (strnumber_ == &::google::protobuf::internal::kEmptyString) {
    strnumber_ = new ::std::string;
  }
  strnumber_->assign(value);
}
inline void BLVoiceCallGetState::set_strnumber(const char* value) {
  set_has_strnumber();
  if (strnumber_ == &::google::protobuf::internal::kEmptyString) {
    strnumber_ = new ::std::string;
  }
  strnumber_->assign(value);
}
inline void BLVoiceCallGetState::set_strnumber(const char* value, size_t size) {
  set_has_strnumber();
  if (strnumber_ == &::google::protobuf::internal::kEmptyString) {
    strnumber_ = new ::std::string;
  }
  strnumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLVoiceCallGetState::mutable_strnumber() {
  set_has_strnumber();
  if (strnumber_ == &::google::protobuf::internal::kEmptyString) {
    strnumber_ = new ::std::string;
  }
  return strnumber_;
}
inline ::std::string* BLVoiceCallGetState::release_strnumber() {
  clear_has_strnumber();
  if (strnumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strnumber_;
    strnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// BLCallLogItem

// required int32 nId = 1;
inline bool BLCallLogItem::has_nid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BLCallLogItem::set_has_nid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BLCallLogItem::clear_has_nid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BLCallLogItem::clear_nid() {
  nid_ = 0;
  clear_has_nid();
}
inline ::google::protobuf::int32 BLCallLogItem::nid() const {
  return nid_;
}
inline void BLCallLogItem::set_nid(::google::protobuf::int32 value) {
  set_has_nid();
  nid_ = value;
}

// required string strTelNumber = 2;
inline bool BLCallLogItem::has_strtelnumber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BLCallLogItem::set_has_strtelnumber() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BLCallLogItem::clear_has_strtelnumber() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BLCallLogItem::clear_strtelnumber() {
  if (strtelnumber_ != &::google::protobuf::internal::kEmptyString) {
    strtelnumber_->clear();
  }
  clear_has_strtelnumber();
}
inline const ::std::string& BLCallLogItem::strtelnumber() const {
  return *strtelnumber_;
}
inline void BLCallLogItem::set_strtelnumber(const ::std::string& value) {
  set_has_strtelnumber();
  if (strtelnumber_ == &::google::protobuf::internal::kEmptyString) {
    strtelnumber_ = new ::std::string;
  }
  strtelnumber_->assign(value);
}
inline void BLCallLogItem::set_strtelnumber(const char* value) {
  set_has_strtelnumber();
  if (strtelnumber_ == &::google::protobuf::internal::kEmptyString) {
    strtelnumber_ = new ::std::string;
  }
  strtelnumber_->assign(value);
}
inline void BLCallLogItem::set_strtelnumber(const char* value, size_t size) {
  set_has_strtelnumber();
  if (strtelnumber_ == &::google::protobuf::internal::kEmptyString) {
    strtelnumber_ = new ::std::string;
  }
  strtelnumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLCallLogItem::mutable_strtelnumber() {
  set_has_strtelnumber();
  if (strtelnumber_ == &::google::protobuf::internal::kEmptyString) {
    strtelnumber_ = new ::std::string;
  }
  return strtelnumber_;
}
inline ::std::string* BLCallLogItem::release_strtelnumber() {
  clear_has_strtelnumber();
  if (strtelnumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strtelnumber_;
    strtelnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string strTelName = 3;
inline bool BLCallLogItem::has_strtelname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BLCallLogItem::set_has_strtelname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BLCallLogItem::clear_has_strtelname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BLCallLogItem::clear_strtelname() {
  if (strtelname_ != &::google::protobuf::internal::kEmptyString) {
    strtelname_->clear();
  }
  clear_has_strtelname();
}
inline const ::std::string& BLCallLogItem::strtelname() const {
  return *strtelname_;
}
inline void BLCallLogItem::set_strtelname(const ::std::string& value) {
  set_has_strtelname();
  if (strtelname_ == &::google::protobuf::internal::kEmptyString) {
    strtelname_ = new ::std::string;
  }
  strtelname_->assign(value);
}
inline void BLCallLogItem::set_strtelname(const char* value) {
  set_has_strtelname();
  if (strtelname_ == &::google::protobuf::internal::kEmptyString) {
    strtelname_ = new ::std::string;
  }
  strtelname_->assign(value);
}
inline void BLCallLogItem::set_strtelname(const char* value, size_t size) {
  set_has_strtelname();
  if (strtelname_ == &::google::protobuf::internal::kEmptyString) {
    strtelname_ = new ::std::string;
  }
  strtelname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLCallLogItem::mutable_strtelname() {
  set_has_strtelname();
  if (strtelname_ == &::google::protobuf::internal::kEmptyString) {
    strtelname_ = new ::std::string;
  }
  return strtelname_;
}
inline ::std::string* BLCallLogItem::release_strtelname() {
  clear_has_strtelname();
  if (strtelname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strtelname_;
    strtelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 nStartTime = 4;
inline bool BLCallLogItem::has_nstarttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BLCallLogItem::set_has_nstarttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BLCallLogItem::clear_has_nstarttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BLCallLogItem::clear_nstarttime() {
  nstarttime_ = 0;
  clear_has_nstarttime();
}
inline ::google::protobuf::int32 BLCallLogItem::nstarttime() const {
  return nstarttime_;
}
inline void BLCallLogItem::set_nstarttime(::google::protobuf::int32 value) {
  set_has_nstarttime();
  nstarttime_ = value;
}

// required int32 nDuration = 5;
inline bool BLCallLogItem::has_nduration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BLCallLogItem::set_has_nduration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BLCallLogItem::clear_has_nduration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BLCallLogItem::clear_nduration() {
  nduration_ = 0;
  clear_has_nduration();
}
inline ::google::protobuf::int32 BLCallLogItem::nduration() const {
  return nduration_;
}
inline void BLCallLogItem::set_nduration(::google::protobuf::int32 value) {
  set_has_nduration();
  nduration_ = value;
}

// required int32 nType = 6;
inline bool BLCallLogItem::has_ntype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BLCallLogItem::set_has_ntype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BLCallLogItem::clear_has_ntype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BLCallLogItem::clear_ntype() {
  ntype_ = 0;
  clear_has_ntype();
}
inline ::google::protobuf::int32 BLCallLogItem::ntype() const {
  return ntype_;
}
inline void BLCallLogItem::set_ntype(::google::protobuf::int32 value) {
  set_has_ntype();
  ntype_ = value;
}

// -------------------------------------------------------------------

// BLCallLogList

// repeated .VoiceCallMessages.BLCallLogItem callLogList = 1;
inline int BLCallLogList::callloglist_size() const {
  return callloglist_.size();
}
inline void BLCallLogList::clear_callloglist() {
  callloglist_.Clear();
}
inline const ::VoiceCallMessages::BLCallLogItem& BLCallLogList::callloglist(int index) const {
  return callloglist_.Get(index);
}
inline ::VoiceCallMessages::BLCallLogItem* BLCallLogList::mutable_callloglist(int index) {
  return callloglist_.Mutable(index);
}
inline ::VoiceCallMessages::BLCallLogItem* BLCallLogList::add_callloglist() {
  return callloglist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::VoiceCallMessages::BLCallLogItem >&
BLCallLogList::callloglist() const {
  return callloglist_;
}
inline ::google::protobuf::RepeatedPtrField< ::VoiceCallMessages::BLCallLogItem >*
BLCallLogList::mutable_callloglist() {
  return &callloglist_;
}

// -------------------------------------------------------------------

// BLCallLogCommon

// optional int32 nId = 1;
inline bool BLCallLogCommon::has_nid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BLCallLogCommon::set_has_nid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BLCallLogCommon::clear_has_nid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BLCallLogCommon::clear_nid() {
  nid_ = 0;
  clear_has_nid();
}
inline ::google::protobuf::int32 BLCallLogCommon::nid() const {
  return nid_;
}
inline void BLCallLogCommon::set_nid(::google::protobuf::int32 value) {
  set_has_nid();
  nid_ = value;
}

// optional int32 nType = 2;
inline bool BLCallLogCommon::has_ntype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BLCallLogCommon::set_has_ntype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BLCallLogCommon::clear_has_ntype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BLCallLogCommon::clear_ntype() {
  ntype_ = 0;
  clear_has_ntype();
}
inline ::google::protobuf::int32 BLCallLogCommon::ntype() const {
  return ntype_;
}
inline void BLCallLogCommon::set_ntype(::google::protobuf::int32 value) {
  set_has_ntype();
  ntype_ = value;
}

// -------------------------------------------------------------------

// BLVoiceCallJCinfo

// optional int32 nCallId = 1;
inline bool BLVoiceCallJCinfo::has_ncallid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BLVoiceCallJCinfo::set_has_ncallid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BLVoiceCallJCinfo::clear_has_ncallid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BLVoiceCallJCinfo::clear_ncallid() {
  ncallid_ = 0;
  clear_has_ncallid();
}
inline ::google::protobuf::int32 BLVoiceCallJCinfo::ncallid() const {
  return ncallid_;
}
inline void BLVoiceCallJCinfo::set_ncallid(::google::protobuf::int32 value) {
  set_has_ncallid();
  ncallid_ = value;
}

// optional int32 nCallType = 2;
inline bool BLVoiceCallJCinfo::has_ncalltype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BLVoiceCallJCinfo::set_has_ncalltype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BLVoiceCallJCinfo::clear_has_ncalltype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BLVoiceCallJCinfo::clear_ncalltype() {
  ncalltype_ = 0;
  clear_has_ncalltype();
}
inline ::google::protobuf::int32 BLVoiceCallJCinfo::ncalltype() const {
  return ncalltype_;
}
inline void BLVoiceCallJCinfo::set_ncalltype(::google::protobuf::int32 value) {
  set_has_ncalltype();
  ncalltype_ = value;
}

// optional int32 nCallState = 3;
inline bool BLVoiceCallJCinfo::has_ncallstate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BLVoiceCallJCinfo::set_has_ncallstate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BLVoiceCallJCinfo::clear_has_ncallstate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BLVoiceCallJCinfo::clear_ncallstate() {
  ncallstate_ = 0;
  clear_has_ncallstate();
}
inline ::google::protobuf::int32 BLVoiceCallJCinfo::ncallstate() const {
  return ncallstate_;
}
inline void BLVoiceCallJCinfo::set_ncallstate(::google::protobuf::int32 value) {
  set_has_ncallstate();
  ncallstate_ = value;
}

// optional int32 nDirect = 4;
inline bool BLVoiceCallJCinfo::has_ndirect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BLVoiceCallJCinfo::set_has_ndirect() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BLVoiceCallJCinfo::clear_has_ndirect() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BLVoiceCallJCinfo::clear_ndirect() {
  ndirect_ = 0;
  clear_has_ndirect();
}
inline ::google::protobuf::int32 BLVoiceCallJCinfo::ndirect() const {
  return ndirect_;
}
inline void BLVoiceCallJCinfo::set_ndirect(::google::protobuf::int32 value) {
  set_has_ndirect();
  ndirect_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace VoiceCallMessages

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_voicecall_5fmessages_2eproto__INCLUDED
