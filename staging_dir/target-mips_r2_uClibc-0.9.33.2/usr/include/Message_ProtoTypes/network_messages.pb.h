// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network_messages.proto

#ifndef PROTOBUF_network_5fmessages_2eproto__INCLUDED
#define PROTOBUF_network_5fmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace NetworkMessages {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_network_5fmessages_2eproto();
void protobuf_AssignDesc_network_5fmessages_2eproto();
void protobuf_ShutdownFile_network_5fmessages_2eproto();

class BLNetworkGetInfoCnf;
class BLNetworkListItem;
class BLNetworkGetListCnf;
class BLNetworkSetReq;
class BLNetworkRegisterReq;
class BLNetworkGetRegStateCnf;
class BLNetworkGetLacAndCellIDCnf;
class BLNetworkGetSDNList;
class BLNetworkCommon;
class BLTowerInfo;
class BLLocationInfo;
class BLNetworkSignalValue;
class BLNetworkGetLTEBandEx;

// ===================================================================

class BLNetworkGetInfoCnf : public ::google::protobuf::MessageLite {
 public:
  BLNetworkGetInfoCnf();
  virtual ~BLNetworkGetInfoCnf();
  
  BLNetworkGetInfoCnf(const BLNetworkGetInfoCnf& from);
  
  inline BLNetworkGetInfoCnf& operator=(const BLNetworkGetInfoCnf& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BLNetworkGetInfoCnf& default_instance();
  
  void Swap(BLNetworkGetInfoCnf* other);
  
  // implements Message ----------------------------------------------
  
  BLNetworkGetInfoCnf* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BLNetworkGetInfoCnf& from);
  void MergeFrom(const BLNetworkGetInfoCnf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 nMode = 1;
  inline bool has_nmode() const;
  inline void clear_nmode();
  static const int kNModeFieldNumber = 1;
  inline ::google::protobuf::int32 nmode() const;
  inline void set_nmode(::google::protobuf::int32 value);
  
  // required int32 nFormat = 2;
  inline bool has_nformat() const;
  inline void clear_nformat();
  static const int kNFormatFieldNumber = 2;
  inline ::google::protobuf::int32 nformat() const;
  inline void set_nformat(::google::protobuf::int32 value);
  
  // required string strOperator = 3;
  inline bool has_stroperator() const;
  inline void clear_stroperator();
  static const int kStrOperatorFieldNumber = 3;
  inline const ::std::string& stroperator() const;
  inline void set_stroperator(const ::std::string& value);
  inline void set_stroperator(const char* value);
  inline void set_stroperator(const char* value, size_t size);
  inline ::std::string* mutable_stroperator();
  inline ::std::string* release_stroperator();
  
  // required int32 nAct = 4;
  inline bool has_nact() const;
  inline void clear_nact();
  static const int kNActFieldNumber = 4;
  inline ::google::protobuf::int32 nact() const;
  inline void set_nact(::google::protobuf::int32 value);
  
  // required int32 nDisplayMask = 5;
  inline bool has_ndisplaymask() const;
  inline void clear_ndisplaymask();
  static const int kNDisplayMaskFieldNumber = 5;
  inline ::google::protobuf::int32 ndisplaymask() const;
  inline void set_ndisplaymask(::google::protobuf::int32 value);
  
  // required bytes strSpName = 6;
  inline bool has_strspname() const;
  inline void clear_strspname();
  static const int kStrSpNameFieldNumber = 6;
  inline const ::std::string& strspname() const;
  inline void set_strspname(const ::std::string& value);
  inline void set_strspname(const char* value);
  inline void set_strspname(const void* value, size_t size);
  inline ::std::string* mutable_strspname();
  inline ::std::string* release_strspname();
  
  // required int32 nRssi = 7;
  inline bool has_nrssi() const;
  inline void clear_nrssi();
  static const int kNRssiFieldNumber = 7;
  inline ::google::protobuf::int32 nrssi() const;
  inline void set_nrssi(::google::protobuf::int32 value);
  
  // required int32 nRoamState = 8;
  inline bool has_nroamstate() const;
  inline void clear_nroamstate();
  static const int kNRoamStateFieldNumber = 8;
  inline ::google::protobuf::int32 nroamstate() const;
  inline void set_nroamstate(::google::protobuf::int32 value);
  
  // required int32 nBearer = 9;
  inline bool has_nbearer() const;
  inline void clear_nbearer();
  static const int kNBearerFieldNumber = 9;
  inline ::google::protobuf::int32 nbearer() const;
  inline void set_nbearer(::google::protobuf::int32 value);
  
  // required int32 nGprsState = 10;
  inline bool has_ngprsstate() const;
  inline void clear_ngprsstate();
  static const int kNGprsStateFieldNumber = 10;
  inline ::google::protobuf::int32 ngprsstate() const;
  inline void set_ngprsstate(::google::protobuf::int32 value);
  
  // required int32 nLastErr = 11;
  inline bool has_nlasterr() const;
  inline void clear_nlasterr();
  static const int kNLastErrFieldNumber = 11;
  inline ::google::protobuf::int32 nlasterr() const;
  inline void set_nlasterr(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetworkMessages.BLNetworkGetInfoCnf)
 private:
  inline void set_has_nmode();
  inline void clear_has_nmode();
  inline void set_has_nformat();
  inline void clear_has_nformat();
  inline void set_has_stroperator();
  inline void clear_has_stroperator();
  inline void set_has_nact();
  inline void clear_has_nact();
  inline void set_has_ndisplaymask();
  inline void clear_has_ndisplaymask();
  inline void set_has_strspname();
  inline void clear_has_strspname();
  inline void set_has_nrssi();
  inline void clear_has_nrssi();
  inline void set_has_nroamstate();
  inline void clear_has_nroamstate();
  inline void set_has_nbearer();
  inline void clear_has_nbearer();
  inline void set_has_ngprsstate();
  inline void clear_has_ngprsstate();
  inline void set_has_nlasterr();
  inline void clear_has_nlasterr();
  
  ::google::protobuf::int32 nmode_;
  ::google::protobuf::int32 nformat_;
  ::std::string* stroperator_;
  ::google::protobuf::int32 nact_;
  ::google::protobuf::int32 ndisplaymask_;
  ::std::string* strspname_;
  ::google::protobuf::int32 nrssi_;
  ::google::protobuf::int32 nroamstate_;
  ::google::protobuf::int32 nbearer_;
  ::google::protobuf::int32 ngprsstate_;
  ::google::protobuf::int32 nlasterr_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_5fmessages_2eproto();
  friend void protobuf_AssignDesc_network_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_network_5fmessages_2eproto();
  
  void InitAsDefaultInstance();
  static BLNetworkGetInfoCnf* default_instance_;
};
// -------------------------------------------------------------------

class BLNetworkListItem : public ::google::protobuf::MessageLite {
 public:
  BLNetworkListItem();
  virtual ~BLNetworkListItem();
  
  BLNetworkListItem(const BLNetworkListItem& from);
  
  inline BLNetworkListItem& operator=(const BLNetworkListItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BLNetworkListItem& default_instance();
  
  void Swap(BLNetworkListItem* other);
  
  // implements Message ----------------------------------------------
  
  BLNetworkListItem* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BLNetworkListItem& from);
  void MergeFrom(const BLNetworkListItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 mode = 1;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 1;
  inline ::google::protobuf::int32 mode() const;
  inline void set_mode(::google::protobuf::int32 value);
  
  // required int32 nState = 2;
  inline bool has_nstate() const;
  inline void clear_nstate();
  static const int kNStateFieldNumber = 2;
  inline ::google::protobuf::int32 nstate() const;
  inline void set_nstate(::google::protobuf::int32 value);
  
  // required string strLongAlpha = 3;
  inline bool has_strlongalpha() const;
  inline void clear_strlongalpha();
  static const int kStrLongAlphaFieldNumber = 3;
  inline const ::std::string& strlongalpha() const;
  inline void set_strlongalpha(const ::std::string& value);
  inline void set_strlongalpha(const char* value);
  inline void set_strlongalpha(const char* value, size_t size);
  inline ::std::string* mutable_strlongalpha();
  inline ::std::string* release_strlongalpha();
  
  // required string strShortAlpha = 4;
  inline bool has_strshortalpha() const;
  inline void clear_strshortalpha();
  static const int kStrShortAlphaFieldNumber = 4;
  inline const ::std::string& strshortalpha() const;
  inline void set_strshortalpha(const ::std::string& value);
  inline void set_strshortalpha(const char* value);
  inline void set_strshortalpha(const char* value, size_t size);
  inline ::std::string* mutable_strshortalpha();
  inline ::std::string* release_strshortalpha();
  
  // required string strNumericAlpha = 5;
  inline bool has_strnumericalpha() const;
  inline void clear_strnumericalpha();
  static const int kStrNumericAlphaFieldNumber = 5;
  inline const ::std::string& strnumericalpha() const;
  inline void set_strnumericalpha(const ::std::string& value);
  inline void set_strnumericalpha(const char* value);
  inline void set_strnumericalpha(const char* value, size_t size);
  inline ::std::string* mutable_strnumericalpha();
  inline ::std::string* release_strnumericalpha();
  
  // required int32 nAct = 6;
  inline bool has_nact() const;
  inline void clear_nact();
  static const int kNActFieldNumber = 6;
  inline ::google::protobuf::int32 nact() const;
  inline void set_nact(::google::protobuf::int32 value);
  
  // required int32 nIndex = 7;
  inline bool has_nindex() const;
  inline void clear_nindex();
  static const int kNIndexFieldNumber = 7;
  inline ::google::protobuf::int32 nindex() const;
  inline void set_nindex(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetworkMessages.BLNetworkListItem)
 private:
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_nstate();
  inline void clear_has_nstate();
  inline void set_has_strlongalpha();
  inline void clear_has_strlongalpha();
  inline void set_has_strshortalpha();
  inline void clear_has_strshortalpha();
  inline void set_has_strnumericalpha();
  inline void clear_has_strnumericalpha();
  inline void set_has_nact();
  inline void clear_has_nact();
  inline void set_has_nindex();
  inline void clear_has_nindex();
  
  ::google::protobuf::int32 mode_;
  ::google::protobuf::int32 nstate_;
  ::std::string* strlongalpha_;
  ::std::string* strshortalpha_;
  ::std::string* strnumericalpha_;
  ::google::protobuf::int32 nact_;
  ::google::protobuf::int32 nindex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_5fmessages_2eproto();
  friend void protobuf_AssignDesc_network_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_network_5fmessages_2eproto();
  
  void InitAsDefaultInstance();
  static BLNetworkListItem* default_instance_;
};
// -------------------------------------------------------------------

class BLNetworkGetListCnf : public ::google::protobuf::MessageLite {
 public:
  BLNetworkGetListCnf();
  virtual ~BLNetworkGetListCnf();
  
  BLNetworkGetListCnf(const BLNetworkGetListCnf& from);
  
  inline BLNetworkGetListCnf& operator=(const BLNetworkGetListCnf& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BLNetworkGetListCnf& default_instance();
  
  void Swap(BLNetworkGetListCnf* other);
  
  // implements Message ----------------------------------------------
  
  BLNetworkGetListCnf* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BLNetworkGetListCnf& from);
  void MergeFrom(const BLNetworkGetListCnf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // required int32 nstate = 2;
  inline bool has_nstate() const;
  inline void clear_nstate();
  static const int kNstateFieldNumber = 2;
  inline ::google::protobuf::int32 nstate() const;
  inline void set_nstate(::google::protobuf::int32 value);
  
  // repeated .NetworkMessages.BLNetworkListItem listNetworkItem = 3;
  inline int listnetworkitem_size() const;
  inline void clear_listnetworkitem();
  static const int kListNetworkItemFieldNumber = 3;
  inline const ::NetworkMessages::BLNetworkListItem& listnetworkitem(int index) const;
  inline ::NetworkMessages::BLNetworkListItem* mutable_listnetworkitem(int index);
  inline ::NetworkMessages::BLNetworkListItem* add_listnetworkitem();
  inline const ::google::protobuf::RepeatedPtrField< ::NetworkMessages::BLNetworkListItem >&
      listnetworkitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::NetworkMessages::BLNetworkListItem >*
      mutable_listnetworkitem();
  
  // @@protoc_insertion_point(class_scope:NetworkMessages.BLNetworkGetListCnf)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_nstate();
  inline void clear_has_nstate();
  
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::int32 nstate_;
  ::google::protobuf::RepeatedPtrField< ::NetworkMessages::BLNetworkListItem > listnetworkitem_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_5fmessages_2eproto();
  friend void protobuf_AssignDesc_network_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_network_5fmessages_2eproto();
  
  void InitAsDefaultInstance();
  static BLNetworkGetListCnf* default_instance_;
};
// -------------------------------------------------------------------

class BLNetworkSetReq : public ::google::protobuf::MessageLite {
 public:
  BLNetworkSetReq();
  virtual ~BLNetworkSetReq();
  
  BLNetworkSetReq(const BLNetworkSetReq& from);
  
  inline BLNetworkSetReq& operator=(const BLNetworkSetReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BLNetworkSetReq& default_instance();
  
  void Swap(BLNetworkSetReq* other);
  
  // implements Message ----------------------------------------------
  
  BLNetworkSetReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BLNetworkSetReq& from);
  void MergeFrom(const BLNetworkSetReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 nMask = 1;
  inline bool has_nmask() const;
  inline void clear_nmask();
  static const int kNMaskFieldNumber = 1;
  inline ::google::protobuf::int32 nmask() const;
  inline void set_nmask(::google::protobuf::int32 value);
  
  // required int32 nMode = 2;
  inline bool has_nmode() const;
  inline void clear_nmode();
  static const int kNModeFieldNumber = 2;
  inline ::google::protobuf::int32 nmode() const;
  inline void set_nmode(::google::protobuf::int32 value);
  
  // required int32 nFormat = 3;
  inline bool has_nformat() const;
  inline void clear_nformat();
  static const int kNFormatFieldNumber = 3;
  inline ::google::protobuf::int32 nformat() const;
  inline void set_nformat(::google::protobuf::int32 value);
  
  // required string strOperator = 4;
  inline bool has_stroperator() const;
  inline void clear_stroperator();
  static const int kStrOperatorFieldNumber = 4;
  inline const ::std::string& stroperator() const;
  inline void set_stroperator(const ::std::string& value);
  inline void set_stroperator(const char* value);
  inline void set_stroperator(const char* value, size_t size);
  inline ::std::string* mutable_stroperator();
  inline ::std::string* release_stroperator();
  
  // required int32 nAct = 5;
  inline bool has_nact() const;
  inline void clear_nact();
  static const int kNActFieldNumber = 5;
  inline ::google::protobuf::int32 nact() const;
  inline void set_nact(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetworkMessages.BLNetworkSetReq)
 private:
  inline void set_has_nmask();
  inline void clear_has_nmask();
  inline void set_has_nmode();
  inline void clear_has_nmode();
  inline void set_has_nformat();
  inline void clear_has_nformat();
  inline void set_has_stroperator();
  inline void clear_has_stroperator();
  inline void set_has_nact();
  inline void clear_has_nact();
  
  ::google::protobuf::int32 nmask_;
  ::google::protobuf::int32 nmode_;
  ::std::string* stroperator_;
  ::google::protobuf::int32 nformat_;
  ::google::protobuf::int32 nact_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_5fmessages_2eproto();
  friend void protobuf_AssignDesc_network_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_network_5fmessages_2eproto();
  
  void InitAsDefaultInstance();
  static BLNetworkSetReq* default_instance_;
};
// -------------------------------------------------------------------

class BLNetworkRegisterReq : public ::google::protobuf::MessageLite {
 public:
  BLNetworkRegisterReq();
  virtual ~BLNetworkRegisterReq();
  
  BLNetworkRegisterReq(const BLNetworkRegisterReq& from);
  
  inline BLNetworkRegisterReq& operator=(const BLNetworkRegisterReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BLNetworkRegisterReq& default_instance();
  
  void Swap(BLNetworkRegisterReq* other);
  
  // implements Message ----------------------------------------------
  
  BLNetworkRegisterReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BLNetworkRegisterReq& from);
  void MergeFrom(const BLNetworkRegisterReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 nIndex = 1;
  inline bool has_nindex() const;
  inline void clear_nindex();
  static const int kNIndexFieldNumber = 1;
  inline ::google::protobuf::int32 nindex() const;
  inline void set_nindex(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetworkMessages.BLNetworkRegisterReq)
 private:
  inline void set_has_nindex();
  inline void clear_has_nindex();
  
  ::google::protobuf::int32 nindex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_5fmessages_2eproto();
  friend void protobuf_AssignDesc_network_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_network_5fmessages_2eproto();
  
  void InitAsDefaultInstance();
  static BLNetworkRegisterReq* default_instance_;
};
// -------------------------------------------------------------------

class BLNetworkGetRegStateCnf : public ::google::protobuf::MessageLite {
 public:
  BLNetworkGetRegStateCnf();
  virtual ~BLNetworkGetRegStateCnf();
  
  BLNetworkGetRegStateCnf(const BLNetworkGetRegStateCnf& from);
  
  inline BLNetworkGetRegStateCnf& operator=(const BLNetworkGetRegStateCnf& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BLNetworkGetRegStateCnf& default_instance();
  
  void Swap(BLNetworkGetRegStateCnf* other);
  
  // implements Message ----------------------------------------------
  
  BLNetworkGetRegStateCnf* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BLNetworkGetRegStateCnf& from);
  void MergeFrom(const BLNetworkGetRegStateCnf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 nType = 1;
  inline bool has_ntype() const;
  inline void clear_ntype();
  static const int kNTypeFieldNumber = 1;
  inline ::google::protobuf::int32 ntype() const;
  inline void set_ntype(::google::protobuf::int32 value);
  
  // required int32 nState = 2;
  inline bool has_nstate() const;
  inline void clear_nstate();
  static const int kNStateFieldNumber = 2;
  inline ::google::protobuf::int32 nstate() const;
  inline void set_nstate(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetworkMessages.BLNetworkGetRegStateCnf)
 private:
  inline void set_has_ntype();
  inline void clear_has_ntype();
  inline void set_has_nstate();
  inline void clear_has_nstate();
  
  ::google::protobuf::int32 ntype_;
  ::google::protobuf::int32 nstate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_5fmessages_2eproto();
  friend void protobuf_AssignDesc_network_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_network_5fmessages_2eproto();
  
  void InitAsDefaultInstance();
  static BLNetworkGetRegStateCnf* default_instance_;
};
// -------------------------------------------------------------------

class BLNetworkGetLacAndCellIDCnf : public ::google::protobuf::MessageLite {
 public:
  BLNetworkGetLacAndCellIDCnf();
  virtual ~BLNetworkGetLacAndCellIDCnf();
  
  BLNetworkGetLacAndCellIDCnf(const BLNetworkGetLacAndCellIDCnf& from);
  
  inline BLNetworkGetLacAndCellIDCnf& operator=(const BLNetworkGetLacAndCellIDCnf& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BLNetworkGetLacAndCellIDCnf& default_instance();
  
  void Swap(BLNetworkGetLacAndCellIDCnf* other);
  
  // implements Message ----------------------------------------------
  
  BLNetworkGetLacAndCellIDCnf* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BLNetworkGetLacAndCellIDCnf& from);
  void MergeFrom(const BLNetworkGetLacAndCellIDCnf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string nLac = 1;
  inline bool has_nlac() const;
  inline void clear_nlac();
  static const int kNLacFieldNumber = 1;
  inline const ::std::string& nlac() const;
  inline void set_nlac(const ::std::string& value);
  inline void set_nlac(const char* value);
  inline void set_nlac(const char* value, size_t size);
  inline ::std::string* mutable_nlac();
  inline ::std::string* release_nlac();
  
  // required string nCellID = 2;
  inline bool has_ncellid() const;
  inline void clear_ncellid();
  static const int kNCellIDFieldNumber = 2;
  inline const ::std::string& ncellid() const;
  inline void set_ncellid(const ::std::string& value);
  inline void set_ncellid(const char* value);
  inline void set_ncellid(const char* value, size_t size);
  inline ::std::string* mutable_ncellid();
  inline ::std::string* release_ncellid();
  
  // @@protoc_insertion_point(class_scope:NetworkMessages.BLNetworkGetLacAndCellIDCnf)
 private:
  inline void set_has_nlac();
  inline void clear_has_nlac();
  inline void set_has_ncellid();
  inline void clear_has_ncellid();
  
  ::std::string* nlac_;
  ::std::string* ncellid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_5fmessages_2eproto();
  friend void protobuf_AssignDesc_network_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_network_5fmessages_2eproto();
  
  void InitAsDefaultInstance();
  static BLNetworkGetLacAndCellIDCnf* default_instance_;
};
// -------------------------------------------------------------------

class BLNetworkGetSDNList : public ::google::protobuf::MessageLite {
 public:
  BLNetworkGetSDNList();
  virtual ~BLNetworkGetSDNList();
  
  BLNetworkGetSDNList(const BLNetworkGetSDNList& from);
  
  inline BLNetworkGetSDNList& operator=(const BLNetworkGetSDNList& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BLNetworkGetSDNList& default_instance();
  
  void Swap(BLNetworkGetSDNList* other);
  
  // implements Message ----------------------------------------------
  
  BLNetworkGetSDNList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BLNetworkGetSDNList& from);
  void MergeFrom(const BLNetworkGetSDNList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string sdn_list = 1;
  inline int sdn_list_size() const;
  inline void clear_sdn_list();
  static const int kSdnListFieldNumber = 1;
  inline const ::std::string& sdn_list(int index) const;
  inline ::std::string* mutable_sdn_list(int index);
  inline void set_sdn_list(int index, const ::std::string& value);
  inline void set_sdn_list(int index, const char* value);
  inline void set_sdn_list(int index, const char* value, size_t size);
  inline ::std::string* add_sdn_list();
  inline void add_sdn_list(const ::std::string& value);
  inline void add_sdn_list(const char* value);
  inline void add_sdn_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& sdn_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sdn_list();
  
  // @@protoc_insertion_point(class_scope:NetworkMessages.BLNetworkGetSDNList)
 private:
  
  ::google::protobuf::RepeatedPtrField< ::std::string> sdn_list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_5fmessages_2eproto();
  friend void protobuf_AssignDesc_network_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_network_5fmessages_2eproto();
  
  void InitAsDefaultInstance();
  static BLNetworkGetSDNList* default_instance_;
};
// -------------------------------------------------------------------

class BLNetworkCommon : public ::google::protobuf::MessageLite {
 public:
  BLNetworkCommon();
  virtual ~BLNetworkCommon();
  
  BLNetworkCommon(const BLNetworkCommon& from);
  
  inline BLNetworkCommon& operator=(const BLNetworkCommon& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BLNetworkCommon& default_instance();
  
  void Swap(BLNetworkCommon* other);
  
  // implements Message ----------------------------------------------
  
  BLNetworkCommon* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BLNetworkCommon& from);
  void MergeFrom(const BLNetworkCommon& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 nBand = 1;
  inline bool has_nband() const;
  inline void clear_nband();
  static const int kNBandFieldNumber = 1;
  inline ::google::protobuf::int32 nband() const;
  inline void set_nband(::google::protobuf::int32 value);
  
  // optional int32 nMode = 2;
  inline bool has_nmode() const;
  inline void clear_nmode();
  static const int kNModeFieldNumber = 2;
  inline ::google::protobuf::int32 nmode() const;
  inline void set_nmode(::google::protobuf::int32 value);
  
  // optional int32 nEcio = 3;
  inline bool has_necio() const;
  inline void clear_necio();
  static const int kNEcioFieldNumber = 3;
  inline ::google::protobuf::int32 necio() const;
  inline void set_necio(::google::protobuf::int32 value);
  
  // optional int32 nRSCP = 4;
  inline bool has_nrscp() const;
  inline void clear_nrscp();
  static const int kNRSCPFieldNumber = 4;
  inline ::google::protobuf::int32 nrscp() const;
  inline void set_nrscp(::google::protobuf::int32 value);
  
  // optional int32 nSearchMode = 5;
  inline bool has_nsearchmode() const;
  inline void clear_nsearchmode();
  static const int kNSearchModeFieldNumber = 5;
  inline ::google::protobuf::int32 nsearchmode() const;
  inline void set_nsearchmode(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetworkMessages.BLNetworkCommon)
 private:
  inline void set_has_nband();
  inline void clear_has_nband();
  inline void set_has_nmode();
  inline void clear_has_nmode();
  inline void set_has_necio();
  inline void clear_has_necio();
  inline void set_has_nrscp();
  inline void clear_has_nrscp();
  inline void set_has_nsearchmode();
  inline void clear_has_nsearchmode();
  
  ::google::protobuf::int32 nband_;
  ::google::protobuf::int32 nmode_;
  ::google::protobuf::int32 necio_;
  ::google::protobuf::int32 nrscp_;
  ::google::protobuf::int32 nsearchmode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_5fmessages_2eproto();
  friend void protobuf_AssignDesc_network_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_network_5fmessages_2eproto();
  
  void InitAsDefaultInstance();
  static BLNetworkCommon* default_instance_;
};
// -------------------------------------------------------------------

class BLTowerInfo : public ::google::protobuf::MessageLite {
 public:
  BLTowerInfo();
  virtual ~BLTowerInfo();
  
  BLTowerInfo(const BLTowerInfo& from);
  
  inline BLTowerInfo& operator=(const BLTowerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BLTowerInfo& default_instance();
  
  void Swap(BLTowerInfo* other);
  
  // implements Message ----------------------------------------------
  
  BLTowerInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BLTowerInfo& from);
  void MergeFrom(const BLTowerInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string strCellid = 1;
  inline bool has_strcellid() const;
  inline void clear_strcellid();
  static const int kStrCellidFieldNumber = 1;
  inline const ::std::string& strcellid() const;
  inline void set_strcellid(const ::std::string& value);
  inline void set_strcellid(const char* value);
  inline void set_strcellid(const char* value, size_t size);
  inline ::std::string* mutable_strcellid();
  inline ::std::string* release_strcellid();
  
  // required string strLac = 2;
  inline bool has_strlac() const;
  inline void clear_strlac();
  static const int kStrLacFieldNumber = 2;
  inline const ::std::string& strlac() const;
  inline void set_strlac(const ::std::string& value);
  inline void set_strlac(const char* value);
  inline void set_strlac(const char* value, size_t size);
  inline ::std::string* mutable_strlac();
  inline ::std::string* release_strlac();
  
  // required string strSigstr = 3;
  inline bool has_strsigstr() const;
  inline void clear_strsigstr();
  static const int kStrSigstrFieldNumber = 3;
  inline const ::std::string& strsigstr() const;
  inline void set_strsigstr(const ::std::string& value);
  inline void set_strsigstr(const char* value);
  inline void set_strsigstr(const char* value, size_t size);
  inline ::std::string* mutable_strsigstr();
  inline ::std::string* release_strsigstr();
  
  // @@protoc_insertion_point(class_scope:NetworkMessages.BLTowerInfo)
 private:
  inline void set_has_strcellid();
  inline void clear_has_strcellid();
  inline void set_has_strlac();
  inline void clear_has_strlac();
  inline void set_has_strsigstr();
  inline void clear_has_strsigstr();
  
  ::std::string* strcellid_;
  ::std::string* strlac_;
  ::std::string* strsigstr_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_5fmessages_2eproto();
  friend void protobuf_AssignDesc_network_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_network_5fmessages_2eproto();
  
  void InitAsDefaultInstance();
  static BLTowerInfo* default_instance_;
};
// -------------------------------------------------------------------

class BLLocationInfo : public ::google::protobuf::MessageLite {
 public:
  BLLocationInfo();
  virtual ~BLLocationInfo();
  
  BLLocationInfo(const BLLocationInfo& from);
  
  inline BLLocationInfo& operator=(const BLLocationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BLLocationInfo& default_instance();
  
  void Swap(BLLocationInfo* other);
  
  // implements Message ----------------------------------------------
  
  BLLocationInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BLLocationInfo& from);
  void MergeFrom(const BLLocationInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .NetworkMessages.BLTowerInfo towers = 1;
  inline int towers_size() const;
  inline void clear_towers();
  static const int kTowersFieldNumber = 1;
  inline const ::NetworkMessages::BLTowerInfo& towers(int index) const;
  inline ::NetworkMessages::BLTowerInfo* mutable_towers(int index);
  inline ::NetworkMessages::BLTowerInfo* add_towers();
  inline const ::google::protobuf::RepeatedPtrField< ::NetworkMessages::BLTowerInfo >&
      towers() const;
  inline ::google::protobuf::RepeatedPtrField< ::NetworkMessages::BLTowerInfo >*
      mutable_towers();
  
  // required string strMcc = 2;
  inline bool has_strmcc() const;
  inline void clear_strmcc();
  static const int kStrMccFieldNumber = 2;
  inline const ::std::string& strmcc() const;
  inline void set_strmcc(const ::std::string& value);
  inline void set_strmcc(const char* value);
  inline void set_strmcc(const char* value, size_t size);
  inline ::std::string* mutable_strmcc();
  inline ::std::string* release_strmcc();
  
  // required string strMnc = 3;
  inline bool has_strmnc() const;
  inline void clear_strmnc();
  static const int kStrMncFieldNumber = 3;
  inline const ::std::string& strmnc() const;
  inline void set_strmnc(const ::std::string& value);
  inline void set_strmnc(const char* value);
  inline void set_strmnc(const char* value, size_t size);
  inline ::std::string* mutable_strmnc();
  inline ::std::string* release_strmnc();
  
  // @@protoc_insertion_point(class_scope:NetworkMessages.BLLocationInfo)
 private:
  inline void set_has_strmcc();
  inline void clear_has_strmcc();
  inline void set_has_strmnc();
  inline void clear_has_strmnc();
  
  ::google::protobuf::RepeatedPtrField< ::NetworkMessages::BLTowerInfo > towers_;
  ::std::string* strmcc_;
  ::std::string* strmnc_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_5fmessages_2eproto();
  friend void protobuf_AssignDesc_network_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_network_5fmessages_2eproto();
  
  void InitAsDefaultInstance();
  static BLLocationInfo* default_instance_;
};
// -------------------------------------------------------------------

class BLNetworkSignalValue : public ::google::protobuf::MessageLite {
 public:
  BLNetworkSignalValue();
  virtual ~BLNetworkSignalValue();
  
  BLNetworkSignalValue(const BLNetworkSignalValue& from);
  
  inline BLNetworkSignalValue& operator=(const BLNetworkSignalValue& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BLNetworkSignalValue& default_instance();
  
  void Swap(BLNetworkSignalValue* other);
  
  // implements Message ----------------------------------------------
  
  BLNetworkSignalValue* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BLNetworkSignalValue& from);
  void MergeFrom(const BLNetworkSignalValue& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 nRSSI = 1;
  inline bool has_nrssi() const;
  inline void clear_nrssi();
  static const int kNRSSIFieldNumber = 1;
  inline ::google::protobuf::int32 nrssi() const;
  inline void set_nrssi(::google::protobuf::int32 value);
  
  // required int32 nRSRP = 2;
  inline bool has_nrsrp() const;
  inline void clear_nrsrp();
  static const int kNRSRPFieldNumber = 2;
  inline ::google::protobuf::int32 nrsrp() const;
  inline void set_nrsrp(::google::protobuf::int32 value);
  
  // required int32 nRSCP = 3;
  inline bool has_nrscp() const;
  inline void clear_nrscp();
  static const int kNRSCPFieldNumber = 3;
  inline ::google::protobuf::int32 nrscp() const;
  inline void set_nrscp(::google::protobuf::int32 value);
  
  // required int32 nRSRQ = 4;
  inline bool has_nrsrq() const;
  inline void clear_nrsrq();
  static const int kNRSRQFieldNumber = 4;
  inline ::google::protobuf::int32 nrsrq() const;
  inline void set_nrsrq(::google::protobuf::int32 value);
  
  // required int32 nEcno = 5;
  inline bool has_necno() const;
  inline void clear_necno();
  static const int kNEcnoFieldNumber = 5;
  inline ::google::protobuf::int32 necno() const;
  inline void set_necno(::google::protobuf::int32 value);
  
  // required int32 nBer = 6;
  inline bool has_nber() const;
  inline void clear_nber();
  static const int kNBerFieldNumber = 6;
  inline ::google::protobuf::int32 nber() const;
  inline void set_nber(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetworkMessages.BLNetworkSignalValue)
 private:
  inline void set_has_nrssi();
  inline void clear_has_nrssi();
  inline void set_has_nrsrp();
  inline void clear_has_nrsrp();
  inline void set_has_nrscp();
  inline void clear_has_nrscp();
  inline void set_has_nrsrq();
  inline void clear_has_nrsrq();
  inline void set_has_necno();
  inline void clear_has_necno();
  inline void set_has_nber();
  inline void clear_has_nber();
  
  ::google::protobuf::int32 nrssi_;
  ::google::protobuf::int32 nrsrp_;
  ::google::protobuf::int32 nrscp_;
  ::google::protobuf::int32 nrsrq_;
  ::google::protobuf::int32 necno_;
  ::google::protobuf::int32 nber_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_5fmessages_2eproto();
  friend void protobuf_AssignDesc_network_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_network_5fmessages_2eproto();
  
  void InitAsDefaultInstance();
  static BLNetworkSignalValue* default_instance_;
};
// -------------------------------------------------------------------

class BLNetworkGetLTEBandEx : public ::google::protobuf::MessageLite {
 public:
  BLNetworkGetLTEBandEx();
  virtual ~BLNetworkGetLTEBandEx();
  
  BLNetworkGetLTEBandEx(const BLNetworkGetLTEBandEx& from);
  
  inline BLNetworkGetLTEBandEx& operator=(const BLNetworkGetLTEBandEx& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const BLNetworkGetLTEBandEx& default_instance();
  
  void Swap(BLNetworkGetLTEBandEx* other);
  
  // implements Message ----------------------------------------------
  
  BLNetworkGetLTEBandEx* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BLNetworkGetLTEBandEx& from);
  void MergeFrom(const BLNetworkGetLTEBandEx& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 nNetMode = 1;
  inline bool has_nnetmode() const;
  inline void clear_nnetmode();
  static const int kNNetModeFieldNumber = 1;
  inline ::google::protobuf::int32 nnetmode() const;
  inline void set_nnetmode(::google::protobuf::int32 value);
  
  // required int32 nNetBand = 2;
  inline bool has_nnetband() const;
  inline void clear_nnetband();
  static const int kNNetBandFieldNumber = 2;
  inline ::google::protobuf::int32 nnetband() const;
  inline void set_nnetband(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NetworkMessages.BLNetworkGetLTEBandEx)
 private:
  inline void set_has_nnetmode();
  inline void clear_has_nnetmode();
  inline void set_has_nnetband();
  inline void clear_has_nnetband();
  
  ::google::protobuf::int32 nnetmode_;
  ::google::protobuf::int32 nnetband_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_network_5fmessages_2eproto();
  friend void protobuf_AssignDesc_network_5fmessages_2eproto();
  friend void protobuf_ShutdownFile_network_5fmessages_2eproto();
  
  void InitAsDefaultInstance();
  static BLNetworkGetLTEBandEx* default_instance_;
};
// ===================================================================


// ===================================================================

// BLNetworkGetInfoCnf

// required int32 nMode = 1;
inline bool BLNetworkGetInfoCnf::has_nmode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BLNetworkGetInfoCnf::set_has_nmode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BLNetworkGetInfoCnf::clear_has_nmode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BLNetworkGetInfoCnf::clear_nmode() {
  nmode_ = 0;
  clear_has_nmode();
}
inline ::google::protobuf::int32 BLNetworkGetInfoCnf::nmode() const {
  return nmode_;
}
inline void BLNetworkGetInfoCnf::set_nmode(::google::protobuf::int32 value) {
  set_has_nmode();
  nmode_ = value;
}

// required int32 nFormat = 2;
inline bool BLNetworkGetInfoCnf::has_nformat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BLNetworkGetInfoCnf::set_has_nformat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BLNetworkGetInfoCnf::clear_has_nformat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BLNetworkGetInfoCnf::clear_nformat() {
  nformat_ = 0;
  clear_has_nformat();
}
inline ::google::protobuf::int32 BLNetworkGetInfoCnf::nformat() const {
  return nformat_;
}
inline void BLNetworkGetInfoCnf::set_nformat(::google::protobuf::int32 value) {
  set_has_nformat();
  nformat_ = value;
}

// required string strOperator = 3;
inline bool BLNetworkGetInfoCnf::has_stroperator() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BLNetworkGetInfoCnf::set_has_stroperator() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BLNetworkGetInfoCnf::clear_has_stroperator() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BLNetworkGetInfoCnf::clear_stroperator() {
  if (stroperator_ != &::google::protobuf::internal::kEmptyString) {
    stroperator_->clear();
  }
  clear_has_stroperator();
}
inline const ::std::string& BLNetworkGetInfoCnf::stroperator() const {
  return *stroperator_;
}
inline void BLNetworkGetInfoCnf::set_stroperator(const ::std::string& value) {
  set_has_stroperator();
  if (stroperator_ == &::google::protobuf::internal::kEmptyString) {
    stroperator_ = new ::std::string;
  }
  stroperator_->assign(value);
}
inline void BLNetworkGetInfoCnf::set_stroperator(const char* value) {
  set_has_stroperator();
  if (stroperator_ == &::google::protobuf::internal::kEmptyString) {
    stroperator_ = new ::std::string;
  }
  stroperator_->assign(value);
}
inline void BLNetworkGetInfoCnf::set_stroperator(const char* value, size_t size) {
  set_has_stroperator();
  if (stroperator_ == &::google::protobuf::internal::kEmptyString) {
    stroperator_ = new ::std::string;
  }
  stroperator_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLNetworkGetInfoCnf::mutable_stroperator() {
  set_has_stroperator();
  if (stroperator_ == &::google::protobuf::internal::kEmptyString) {
    stroperator_ = new ::std::string;
  }
  return stroperator_;
}
inline ::std::string* BLNetworkGetInfoCnf::release_stroperator() {
  clear_has_stroperator();
  if (stroperator_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stroperator_;
    stroperator_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 nAct = 4;
inline bool BLNetworkGetInfoCnf::has_nact() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BLNetworkGetInfoCnf::set_has_nact() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BLNetworkGetInfoCnf::clear_has_nact() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BLNetworkGetInfoCnf::clear_nact() {
  nact_ = 0;
  clear_has_nact();
}
inline ::google::protobuf::int32 BLNetworkGetInfoCnf::nact() const {
  return nact_;
}
inline void BLNetworkGetInfoCnf::set_nact(::google::protobuf::int32 value) {
  set_has_nact();
  nact_ = value;
}

// required int32 nDisplayMask = 5;
inline bool BLNetworkGetInfoCnf::has_ndisplaymask() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BLNetworkGetInfoCnf::set_has_ndisplaymask() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BLNetworkGetInfoCnf::clear_has_ndisplaymask() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BLNetworkGetInfoCnf::clear_ndisplaymask() {
  ndisplaymask_ = 0;
  clear_has_ndisplaymask();
}
inline ::google::protobuf::int32 BLNetworkGetInfoCnf::ndisplaymask() const {
  return ndisplaymask_;
}
inline void BLNetworkGetInfoCnf::set_ndisplaymask(::google::protobuf::int32 value) {
  set_has_ndisplaymask();
  ndisplaymask_ = value;
}

// required bytes strSpName = 6;
inline bool BLNetworkGetInfoCnf::has_strspname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BLNetworkGetInfoCnf::set_has_strspname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BLNetworkGetInfoCnf::clear_has_strspname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BLNetworkGetInfoCnf::clear_strspname() {
  if (strspname_ != &::google::protobuf::internal::kEmptyString) {
    strspname_->clear();
  }
  clear_has_strspname();
}
inline const ::std::string& BLNetworkGetInfoCnf::strspname() const {
  return *strspname_;
}
inline void BLNetworkGetInfoCnf::set_strspname(const ::std::string& value) {
  set_has_strspname();
  if (strspname_ == &::google::protobuf::internal::kEmptyString) {
    strspname_ = new ::std::string;
  }
  strspname_->assign(value);
}
inline void BLNetworkGetInfoCnf::set_strspname(const char* value) {
  set_has_strspname();
  if (strspname_ == &::google::protobuf::internal::kEmptyString) {
    strspname_ = new ::std::string;
  }
  strspname_->assign(value);
}
inline void BLNetworkGetInfoCnf::set_strspname(const void* value, size_t size) {
  set_has_strspname();
  if (strspname_ == &::google::protobuf::internal::kEmptyString) {
    strspname_ = new ::std::string;
  }
  strspname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLNetworkGetInfoCnf::mutable_strspname() {
  set_has_strspname();
  if (strspname_ == &::google::protobuf::internal::kEmptyString) {
    strspname_ = new ::std::string;
  }
  return strspname_;
}
inline ::std::string* BLNetworkGetInfoCnf::release_strspname() {
  clear_has_strspname();
  if (strspname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strspname_;
    strspname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 nRssi = 7;
inline bool BLNetworkGetInfoCnf::has_nrssi() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BLNetworkGetInfoCnf::set_has_nrssi() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BLNetworkGetInfoCnf::clear_has_nrssi() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BLNetworkGetInfoCnf::clear_nrssi() {
  nrssi_ = 0;
  clear_has_nrssi();
}
inline ::google::protobuf::int32 BLNetworkGetInfoCnf::nrssi() const {
  return nrssi_;
}
inline void BLNetworkGetInfoCnf::set_nrssi(::google::protobuf::int32 value) {
  set_has_nrssi();
  nrssi_ = value;
}

// required int32 nRoamState = 8;
inline bool BLNetworkGetInfoCnf::has_nroamstate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BLNetworkGetInfoCnf::set_has_nroamstate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BLNetworkGetInfoCnf::clear_has_nroamstate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BLNetworkGetInfoCnf::clear_nroamstate() {
  nroamstate_ = 0;
  clear_has_nroamstate();
}
inline ::google::protobuf::int32 BLNetworkGetInfoCnf::nroamstate() const {
  return nroamstate_;
}
inline void BLNetworkGetInfoCnf::set_nroamstate(::google::protobuf::int32 value) {
  set_has_nroamstate();
  nroamstate_ = value;
}

// required int32 nBearer = 9;
inline bool BLNetworkGetInfoCnf::has_nbearer() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BLNetworkGetInfoCnf::set_has_nbearer() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BLNetworkGetInfoCnf::clear_has_nbearer() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BLNetworkGetInfoCnf::clear_nbearer() {
  nbearer_ = 0;
  clear_has_nbearer();
}
inline ::google::protobuf::int32 BLNetworkGetInfoCnf::nbearer() const {
  return nbearer_;
}
inline void BLNetworkGetInfoCnf::set_nbearer(::google::protobuf::int32 value) {
  set_has_nbearer();
  nbearer_ = value;
}

// required int32 nGprsState = 10;
inline bool BLNetworkGetInfoCnf::has_ngprsstate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BLNetworkGetInfoCnf::set_has_ngprsstate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BLNetworkGetInfoCnf::clear_has_ngprsstate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BLNetworkGetInfoCnf::clear_ngprsstate() {
  ngprsstate_ = 0;
  clear_has_ngprsstate();
}
inline ::google::protobuf::int32 BLNetworkGetInfoCnf::ngprsstate() const {
  return ngprsstate_;
}
inline void BLNetworkGetInfoCnf::set_ngprsstate(::google::protobuf::int32 value) {
  set_has_ngprsstate();
  ngprsstate_ = value;
}

// required int32 nLastErr = 11;
inline bool BLNetworkGetInfoCnf::has_nlasterr() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BLNetworkGetInfoCnf::set_has_nlasterr() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BLNetworkGetInfoCnf::clear_has_nlasterr() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BLNetworkGetInfoCnf::clear_nlasterr() {
  nlasterr_ = 0;
  clear_has_nlasterr();
}
inline ::google::protobuf::int32 BLNetworkGetInfoCnf::nlasterr() const {
  return nlasterr_;
}
inline void BLNetworkGetInfoCnf::set_nlasterr(::google::protobuf::int32 value) {
  set_has_nlasterr();
  nlasterr_ = value;
}

// -------------------------------------------------------------------

// BLNetworkListItem

// required int32 mode = 1;
inline bool BLNetworkListItem::has_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BLNetworkListItem::set_has_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BLNetworkListItem::clear_has_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BLNetworkListItem::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::google::protobuf::int32 BLNetworkListItem::mode() const {
  return mode_;
}
inline void BLNetworkListItem::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
}

// required int32 nState = 2;
inline bool BLNetworkListItem::has_nstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BLNetworkListItem::set_has_nstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BLNetworkListItem::clear_has_nstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BLNetworkListItem::clear_nstate() {
  nstate_ = 0;
  clear_has_nstate();
}
inline ::google::protobuf::int32 BLNetworkListItem::nstate() const {
  return nstate_;
}
inline void BLNetworkListItem::set_nstate(::google::protobuf::int32 value) {
  set_has_nstate();
  nstate_ = value;
}

// required string strLongAlpha = 3;
inline bool BLNetworkListItem::has_strlongalpha() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BLNetworkListItem::set_has_strlongalpha() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BLNetworkListItem::clear_has_strlongalpha() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BLNetworkListItem::clear_strlongalpha() {
  if (strlongalpha_ != &::google::protobuf::internal::kEmptyString) {
    strlongalpha_->clear();
  }
  clear_has_strlongalpha();
}
inline const ::std::string& BLNetworkListItem::strlongalpha() const {
  return *strlongalpha_;
}
inline void BLNetworkListItem::set_strlongalpha(const ::std::string& value) {
  set_has_strlongalpha();
  if (strlongalpha_ == &::google::protobuf::internal::kEmptyString) {
    strlongalpha_ = new ::std::string;
  }
  strlongalpha_->assign(value);
}
inline void BLNetworkListItem::set_strlongalpha(const char* value) {
  set_has_strlongalpha();
  if (strlongalpha_ == &::google::protobuf::internal::kEmptyString) {
    strlongalpha_ = new ::std::string;
  }
  strlongalpha_->assign(value);
}
inline void BLNetworkListItem::set_strlongalpha(const char* value, size_t size) {
  set_has_strlongalpha();
  if (strlongalpha_ == &::google::protobuf::internal::kEmptyString) {
    strlongalpha_ = new ::std::string;
  }
  strlongalpha_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLNetworkListItem::mutable_strlongalpha() {
  set_has_strlongalpha();
  if (strlongalpha_ == &::google::protobuf::internal::kEmptyString) {
    strlongalpha_ = new ::std::string;
  }
  return strlongalpha_;
}
inline ::std::string* BLNetworkListItem::release_strlongalpha() {
  clear_has_strlongalpha();
  if (strlongalpha_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strlongalpha_;
    strlongalpha_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string strShortAlpha = 4;
inline bool BLNetworkListItem::has_strshortalpha() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BLNetworkListItem::set_has_strshortalpha() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BLNetworkListItem::clear_has_strshortalpha() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BLNetworkListItem::clear_strshortalpha() {
  if (strshortalpha_ != &::google::protobuf::internal::kEmptyString) {
    strshortalpha_->clear();
  }
  clear_has_strshortalpha();
}
inline const ::std::string& BLNetworkListItem::strshortalpha() const {
  return *strshortalpha_;
}
inline void BLNetworkListItem::set_strshortalpha(const ::std::string& value) {
  set_has_strshortalpha();
  if (strshortalpha_ == &::google::protobuf::internal::kEmptyString) {
    strshortalpha_ = new ::std::string;
  }
  strshortalpha_->assign(value);
}
inline void BLNetworkListItem::set_strshortalpha(const char* value) {
  set_has_strshortalpha();
  if (strshortalpha_ == &::google::protobuf::internal::kEmptyString) {
    strshortalpha_ = new ::std::string;
  }
  strshortalpha_->assign(value);
}
inline void BLNetworkListItem::set_strshortalpha(const char* value, size_t size) {
  set_has_strshortalpha();
  if (strshortalpha_ == &::google::protobuf::internal::kEmptyString) {
    strshortalpha_ = new ::std::string;
  }
  strshortalpha_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLNetworkListItem::mutable_strshortalpha() {
  set_has_strshortalpha();
  if (strshortalpha_ == &::google::protobuf::internal::kEmptyString) {
    strshortalpha_ = new ::std::string;
  }
  return strshortalpha_;
}
inline ::std::string* BLNetworkListItem::release_strshortalpha() {
  clear_has_strshortalpha();
  if (strshortalpha_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strshortalpha_;
    strshortalpha_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string strNumericAlpha = 5;
inline bool BLNetworkListItem::has_strnumericalpha() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BLNetworkListItem::set_has_strnumericalpha() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BLNetworkListItem::clear_has_strnumericalpha() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BLNetworkListItem::clear_strnumericalpha() {
  if (strnumericalpha_ != &::google::protobuf::internal::kEmptyString) {
    strnumericalpha_->clear();
  }
  clear_has_strnumericalpha();
}
inline const ::std::string& BLNetworkListItem::strnumericalpha() const {
  return *strnumericalpha_;
}
inline void BLNetworkListItem::set_strnumericalpha(const ::std::string& value) {
  set_has_strnumericalpha();
  if (strnumericalpha_ == &::google::protobuf::internal::kEmptyString) {
    strnumericalpha_ = new ::std::string;
  }
  strnumericalpha_->assign(value);
}
inline void BLNetworkListItem::set_strnumericalpha(const char* value) {
  set_has_strnumericalpha();
  if (strnumericalpha_ == &::google::protobuf::internal::kEmptyString) {
    strnumericalpha_ = new ::std::string;
  }
  strnumericalpha_->assign(value);
}
inline void BLNetworkListItem::set_strnumericalpha(const char* value, size_t size) {
  set_has_strnumericalpha();
  if (strnumericalpha_ == &::google::protobuf::internal::kEmptyString) {
    strnumericalpha_ = new ::std::string;
  }
  strnumericalpha_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLNetworkListItem::mutable_strnumericalpha() {
  set_has_strnumericalpha();
  if (strnumericalpha_ == &::google::protobuf::internal::kEmptyString) {
    strnumericalpha_ = new ::std::string;
  }
  return strnumericalpha_;
}
inline ::std::string* BLNetworkListItem::release_strnumericalpha() {
  clear_has_strnumericalpha();
  if (strnumericalpha_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strnumericalpha_;
    strnumericalpha_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 nAct = 6;
inline bool BLNetworkListItem::has_nact() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BLNetworkListItem::set_has_nact() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BLNetworkListItem::clear_has_nact() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BLNetworkListItem::clear_nact() {
  nact_ = 0;
  clear_has_nact();
}
inline ::google::protobuf::int32 BLNetworkListItem::nact() const {
  return nact_;
}
inline void BLNetworkListItem::set_nact(::google::protobuf::int32 value) {
  set_has_nact();
  nact_ = value;
}

// required int32 nIndex = 7;
inline bool BLNetworkListItem::has_nindex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BLNetworkListItem::set_has_nindex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BLNetworkListItem::clear_has_nindex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BLNetworkListItem::clear_nindex() {
  nindex_ = 0;
  clear_has_nindex();
}
inline ::google::protobuf::int32 BLNetworkListItem::nindex() const {
  return nindex_;
}
inline void BLNetworkListItem::set_nindex(::google::protobuf::int32 value) {
  set_has_nindex();
  nindex_ = value;
}

// -------------------------------------------------------------------

// BLNetworkGetListCnf

// required int32 error_code = 1;
inline bool BLNetworkGetListCnf::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BLNetworkGetListCnf::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BLNetworkGetListCnf::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BLNetworkGetListCnf::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 BLNetworkGetListCnf::error_code() const {
  return error_code_;
}
inline void BLNetworkGetListCnf::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// required int32 nstate = 2;
inline bool BLNetworkGetListCnf::has_nstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BLNetworkGetListCnf::set_has_nstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BLNetworkGetListCnf::clear_has_nstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BLNetworkGetListCnf::clear_nstate() {
  nstate_ = 0;
  clear_has_nstate();
}
inline ::google::protobuf::int32 BLNetworkGetListCnf::nstate() const {
  return nstate_;
}
inline void BLNetworkGetListCnf::set_nstate(::google::protobuf::int32 value) {
  set_has_nstate();
  nstate_ = value;
}

// repeated .NetworkMessages.BLNetworkListItem listNetworkItem = 3;
inline int BLNetworkGetListCnf::listnetworkitem_size() const {
  return listnetworkitem_.size();
}
inline void BLNetworkGetListCnf::clear_listnetworkitem() {
  listnetworkitem_.Clear();
}
inline const ::NetworkMessages::BLNetworkListItem& BLNetworkGetListCnf::listnetworkitem(int index) const {
  return listnetworkitem_.Get(index);
}
inline ::NetworkMessages::BLNetworkListItem* BLNetworkGetListCnf::mutable_listnetworkitem(int index) {
  return listnetworkitem_.Mutable(index);
}
inline ::NetworkMessages::BLNetworkListItem* BLNetworkGetListCnf::add_listnetworkitem() {
  return listnetworkitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NetworkMessages::BLNetworkListItem >&
BLNetworkGetListCnf::listnetworkitem() const {
  return listnetworkitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::NetworkMessages::BLNetworkListItem >*
BLNetworkGetListCnf::mutable_listnetworkitem() {
  return &listnetworkitem_;
}

// -------------------------------------------------------------------

// BLNetworkSetReq

// required int32 nMask = 1;
inline bool BLNetworkSetReq::has_nmask() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BLNetworkSetReq::set_has_nmask() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BLNetworkSetReq::clear_has_nmask() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BLNetworkSetReq::clear_nmask() {
  nmask_ = 0;
  clear_has_nmask();
}
inline ::google::protobuf::int32 BLNetworkSetReq::nmask() const {
  return nmask_;
}
inline void BLNetworkSetReq::set_nmask(::google::protobuf::int32 value) {
  set_has_nmask();
  nmask_ = value;
}

// required int32 nMode = 2;
inline bool BLNetworkSetReq::has_nmode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BLNetworkSetReq::set_has_nmode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BLNetworkSetReq::clear_has_nmode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BLNetworkSetReq::clear_nmode() {
  nmode_ = 0;
  clear_has_nmode();
}
inline ::google::protobuf::int32 BLNetworkSetReq::nmode() const {
  return nmode_;
}
inline void BLNetworkSetReq::set_nmode(::google::protobuf::int32 value) {
  set_has_nmode();
  nmode_ = value;
}

// required int32 nFormat = 3;
inline bool BLNetworkSetReq::has_nformat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BLNetworkSetReq::set_has_nformat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BLNetworkSetReq::clear_has_nformat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BLNetworkSetReq::clear_nformat() {
  nformat_ = 0;
  clear_has_nformat();
}
inline ::google::protobuf::int32 BLNetworkSetReq::nformat() const {
  return nformat_;
}
inline void BLNetworkSetReq::set_nformat(::google::protobuf::int32 value) {
  set_has_nformat();
  nformat_ = value;
}

// required string strOperator = 4;
inline bool BLNetworkSetReq::has_stroperator() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BLNetworkSetReq::set_has_stroperator() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BLNetworkSetReq::clear_has_stroperator() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BLNetworkSetReq::clear_stroperator() {
  if (stroperator_ != &::google::protobuf::internal::kEmptyString) {
    stroperator_->clear();
  }
  clear_has_stroperator();
}
inline const ::std::string& BLNetworkSetReq::stroperator() const {
  return *stroperator_;
}
inline void BLNetworkSetReq::set_stroperator(const ::std::string& value) {
  set_has_stroperator();
  if (stroperator_ == &::google::protobuf::internal::kEmptyString) {
    stroperator_ = new ::std::string;
  }
  stroperator_->assign(value);
}
inline void BLNetworkSetReq::set_stroperator(const char* value) {
  set_has_stroperator();
  if (stroperator_ == &::google::protobuf::internal::kEmptyString) {
    stroperator_ = new ::std::string;
  }
  stroperator_->assign(value);
}
inline void BLNetworkSetReq::set_stroperator(const char* value, size_t size) {
  set_has_stroperator();
  if (stroperator_ == &::google::protobuf::internal::kEmptyString) {
    stroperator_ = new ::std::string;
  }
  stroperator_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLNetworkSetReq::mutable_stroperator() {
  set_has_stroperator();
  if (stroperator_ == &::google::protobuf::internal::kEmptyString) {
    stroperator_ = new ::std::string;
  }
  return stroperator_;
}
inline ::std::string* BLNetworkSetReq::release_stroperator() {
  clear_has_stroperator();
  if (stroperator_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stroperator_;
    stroperator_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 nAct = 5;
inline bool BLNetworkSetReq::has_nact() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BLNetworkSetReq::set_has_nact() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BLNetworkSetReq::clear_has_nact() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BLNetworkSetReq::clear_nact() {
  nact_ = 0;
  clear_has_nact();
}
inline ::google::protobuf::int32 BLNetworkSetReq::nact() const {
  return nact_;
}
inline void BLNetworkSetReq::set_nact(::google::protobuf::int32 value) {
  set_has_nact();
  nact_ = value;
}

// -------------------------------------------------------------------

// BLNetworkRegisterReq

// required int32 nIndex = 1;
inline bool BLNetworkRegisterReq::has_nindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BLNetworkRegisterReq::set_has_nindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BLNetworkRegisterReq::clear_has_nindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BLNetworkRegisterReq::clear_nindex() {
  nindex_ = 0;
  clear_has_nindex();
}
inline ::google::protobuf::int32 BLNetworkRegisterReq::nindex() const {
  return nindex_;
}
inline void BLNetworkRegisterReq::set_nindex(::google::protobuf::int32 value) {
  set_has_nindex();
  nindex_ = value;
}

// -------------------------------------------------------------------

// BLNetworkGetRegStateCnf

// required int32 nType = 1;
inline bool BLNetworkGetRegStateCnf::has_ntype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BLNetworkGetRegStateCnf::set_has_ntype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BLNetworkGetRegStateCnf::clear_has_ntype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BLNetworkGetRegStateCnf::clear_ntype() {
  ntype_ = 0;
  clear_has_ntype();
}
inline ::google::protobuf::int32 BLNetworkGetRegStateCnf::ntype() const {
  return ntype_;
}
inline void BLNetworkGetRegStateCnf::set_ntype(::google::protobuf::int32 value) {
  set_has_ntype();
  ntype_ = value;
}

// required int32 nState = 2;
inline bool BLNetworkGetRegStateCnf::has_nstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BLNetworkGetRegStateCnf::set_has_nstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BLNetworkGetRegStateCnf::clear_has_nstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BLNetworkGetRegStateCnf::clear_nstate() {
  nstate_ = 0;
  clear_has_nstate();
}
inline ::google::protobuf::int32 BLNetworkGetRegStateCnf::nstate() const {
  return nstate_;
}
inline void BLNetworkGetRegStateCnf::set_nstate(::google::protobuf::int32 value) {
  set_has_nstate();
  nstate_ = value;
}

// -------------------------------------------------------------------

// BLNetworkGetLacAndCellIDCnf

// required string nLac = 1;
inline bool BLNetworkGetLacAndCellIDCnf::has_nlac() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BLNetworkGetLacAndCellIDCnf::set_has_nlac() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BLNetworkGetLacAndCellIDCnf::clear_has_nlac() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BLNetworkGetLacAndCellIDCnf::clear_nlac() {
  if (nlac_ != &::google::protobuf::internal::kEmptyString) {
    nlac_->clear();
  }
  clear_has_nlac();
}
inline const ::std::string& BLNetworkGetLacAndCellIDCnf::nlac() const {
  return *nlac_;
}
inline void BLNetworkGetLacAndCellIDCnf::set_nlac(const ::std::string& value) {
  set_has_nlac();
  if (nlac_ == &::google::protobuf::internal::kEmptyString) {
    nlac_ = new ::std::string;
  }
  nlac_->assign(value);
}
inline void BLNetworkGetLacAndCellIDCnf::set_nlac(const char* value) {
  set_has_nlac();
  if (nlac_ == &::google::protobuf::internal::kEmptyString) {
    nlac_ = new ::std::string;
  }
  nlac_->assign(value);
}
inline void BLNetworkGetLacAndCellIDCnf::set_nlac(const char* value, size_t size) {
  set_has_nlac();
  if (nlac_ == &::google::protobuf::internal::kEmptyString) {
    nlac_ = new ::std::string;
  }
  nlac_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLNetworkGetLacAndCellIDCnf::mutable_nlac() {
  set_has_nlac();
  if (nlac_ == &::google::protobuf::internal::kEmptyString) {
    nlac_ = new ::std::string;
  }
  return nlac_;
}
inline ::std::string* BLNetworkGetLacAndCellIDCnf::release_nlac() {
  clear_has_nlac();
  if (nlac_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nlac_;
    nlac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string nCellID = 2;
inline bool BLNetworkGetLacAndCellIDCnf::has_ncellid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BLNetworkGetLacAndCellIDCnf::set_has_ncellid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BLNetworkGetLacAndCellIDCnf::clear_has_ncellid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BLNetworkGetLacAndCellIDCnf::clear_ncellid() {
  if (ncellid_ != &::google::protobuf::internal::kEmptyString) {
    ncellid_->clear();
  }
  clear_has_ncellid();
}
inline const ::std::string& BLNetworkGetLacAndCellIDCnf::ncellid() const {
  return *ncellid_;
}
inline void BLNetworkGetLacAndCellIDCnf::set_ncellid(const ::std::string& value) {
  set_has_ncellid();
  if (ncellid_ == &::google::protobuf::internal::kEmptyString) {
    ncellid_ = new ::std::string;
  }
  ncellid_->assign(value);
}
inline void BLNetworkGetLacAndCellIDCnf::set_ncellid(const char* value) {
  set_has_ncellid();
  if (ncellid_ == &::google::protobuf::internal::kEmptyString) {
    ncellid_ = new ::std::string;
  }
  ncellid_->assign(value);
}
inline void BLNetworkGetLacAndCellIDCnf::set_ncellid(const char* value, size_t size) {
  set_has_ncellid();
  if (ncellid_ == &::google::protobuf::internal::kEmptyString) {
    ncellid_ = new ::std::string;
  }
  ncellid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLNetworkGetLacAndCellIDCnf::mutable_ncellid() {
  set_has_ncellid();
  if (ncellid_ == &::google::protobuf::internal::kEmptyString) {
    ncellid_ = new ::std::string;
  }
  return ncellid_;
}
inline ::std::string* BLNetworkGetLacAndCellIDCnf::release_ncellid() {
  clear_has_ncellid();
  if (ncellid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ncellid_;
    ncellid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// BLNetworkGetSDNList

// repeated string sdn_list = 1;
inline int BLNetworkGetSDNList::sdn_list_size() const {
  return sdn_list_.size();
}
inline void BLNetworkGetSDNList::clear_sdn_list() {
  sdn_list_.Clear();
}
inline const ::std::string& BLNetworkGetSDNList::sdn_list(int index) const {
  return sdn_list_.Get(index);
}
inline ::std::string* BLNetworkGetSDNList::mutable_sdn_list(int index) {
  return sdn_list_.Mutable(index);
}
inline void BLNetworkGetSDNList::set_sdn_list(int index, const ::std::string& value) {
  sdn_list_.Mutable(index)->assign(value);
}
inline void BLNetworkGetSDNList::set_sdn_list(int index, const char* value) {
  sdn_list_.Mutable(index)->assign(value);
}
inline void BLNetworkGetSDNList::set_sdn_list(int index, const char* value, size_t size) {
  sdn_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLNetworkGetSDNList::add_sdn_list() {
  return sdn_list_.Add();
}
inline void BLNetworkGetSDNList::add_sdn_list(const ::std::string& value) {
  sdn_list_.Add()->assign(value);
}
inline void BLNetworkGetSDNList::add_sdn_list(const char* value) {
  sdn_list_.Add()->assign(value);
}
inline void BLNetworkGetSDNList::add_sdn_list(const char* value, size_t size) {
  sdn_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BLNetworkGetSDNList::sdn_list() const {
  return sdn_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BLNetworkGetSDNList::mutable_sdn_list() {
  return &sdn_list_;
}

// -------------------------------------------------------------------

// BLNetworkCommon

// optional int32 nBand = 1;
inline bool BLNetworkCommon::has_nband() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BLNetworkCommon::set_has_nband() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BLNetworkCommon::clear_has_nband() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BLNetworkCommon::clear_nband() {
  nband_ = 0;
  clear_has_nband();
}
inline ::google::protobuf::int32 BLNetworkCommon::nband() const {
  return nband_;
}
inline void BLNetworkCommon::set_nband(::google::protobuf::int32 value) {
  set_has_nband();
  nband_ = value;
}

// optional int32 nMode = 2;
inline bool BLNetworkCommon::has_nmode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BLNetworkCommon::set_has_nmode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BLNetworkCommon::clear_has_nmode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BLNetworkCommon::clear_nmode() {
  nmode_ = 0;
  clear_has_nmode();
}
inline ::google::protobuf::int32 BLNetworkCommon::nmode() const {
  return nmode_;
}
inline void BLNetworkCommon::set_nmode(::google::protobuf::int32 value) {
  set_has_nmode();
  nmode_ = value;
}

// optional int32 nEcio = 3;
inline bool BLNetworkCommon::has_necio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BLNetworkCommon::set_has_necio() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BLNetworkCommon::clear_has_necio() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BLNetworkCommon::clear_necio() {
  necio_ = 0;
  clear_has_necio();
}
inline ::google::protobuf::int32 BLNetworkCommon::necio() const {
  return necio_;
}
inline void BLNetworkCommon::set_necio(::google::protobuf::int32 value) {
  set_has_necio();
  necio_ = value;
}

// optional int32 nRSCP = 4;
inline bool BLNetworkCommon::has_nrscp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BLNetworkCommon::set_has_nrscp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BLNetworkCommon::clear_has_nrscp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BLNetworkCommon::clear_nrscp() {
  nrscp_ = 0;
  clear_has_nrscp();
}
inline ::google::protobuf::int32 BLNetworkCommon::nrscp() const {
  return nrscp_;
}
inline void BLNetworkCommon::set_nrscp(::google::protobuf::int32 value) {
  set_has_nrscp();
  nrscp_ = value;
}

// optional int32 nSearchMode = 5;
inline bool BLNetworkCommon::has_nsearchmode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BLNetworkCommon::set_has_nsearchmode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BLNetworkCommon::clear_has_nsearchmode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BLNetworkCommon::clear_nsearchmode() {
  nsearchmode_ = 0;
  clear_has_nsearchmode();
}
inline ::google::protobuf::int32 BLNetworkCommon::nsearchmode() const {
  return nsearchmode_;
}
inline void BLNetworkCommon::set_nsearchmode(::google::protobuf::int32 value) {
  set_has_nsearchmode();
  nsearchmode_ = value;
}

// -------------------------------------------------------------------

// BLTowerInfo

// required string strCellid = 1;
inline bool BLTowerInfo::has_strcellid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BLTowerInfo::set_has_strcellid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BLTowerInfo::clear_has_strcellid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BLTowerInfo::clear_strcellid() {
  if (strcellid_ != &::google::protobuf::internal::kEmptyString) {
    strcellid_->clear();
  }
  clear_has_strcellid();
}
inline const ::std::string& BLTowerInfo::strcellid() const {
  return *strcellid_;
}
inline void BLTowerInfo::set_strcellid(const ::std::string& value) {
  set_has_strcellid();
  if (strcellid_ == &::google::protobuf::internal::kEmptyString) {
    strcellid_ = new ::std::string;
  }
  strcellid_->assign(value);
}
inline void BLTowerInfo::set_strcellid(const char* value) {
  set_has_strcellid();
  if (strcellid_ == &::google::protobuf::internal::kEmptyString) {
    strcellid_ = new ::std::string;
  }
  strcellid_->assign(value);
}
inline void BLTowerInfo::set_strcellid(const char* value, size_t size) {
  set_has_strcellid();
  if (strcellid_ == &::google::protobuf::internal::kEmptyString) {
    strcellid_ = new ::std::string;
  }
  strcellid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLTowerInfo::mutable_strcellid() {
  set_has_strcellid();
  if (strcellid_ == &::google::protobuf::internal::kEmptyString) {
    strcellid_ = new ::std::string;
  }
  return strcellid_;
}
inline ::std::string* BLTowerInfo::release_strcellid() {
  clear_has_strcellid();
  if (strcellid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strcellid_;
    strcellid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string strLac = 2;
inline bool BLTowerInfo::has_strlac() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BLTowerInfo::set_has_strlac() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BLTowerInfo::clear_has_strlac() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BLTowerInfo::clear_strlac() {
  if (strlac_ != &::google::protobuf::internal::kEmptyString) {
    strlac_->clear();
  }
  clear_has_strlac();
}
inline const ::std::string& BLTowerInfo::strlac() const {
  return *strlac_;
}
inline void BLTowerInfo::set_strlac(const ::std::string& value) {
  set_has_strlac();
  if (strlac_ == &::google::protobuf::internal::kEmptyString) {
    strlac_ = new ::std::string;
  }
  strlac_->assign(value);
}
inline void BLTowerInfo::set_strlac(const char* value) {
  set_has_strlac();
  if (strlac_ == &::google::protobuf::internal::kEmptyString) {
    strlac_ = new ::std::string;
  }
  strlac_->assign(value);
}
inline void BLTowerInfo::set_strlac(const char* value, size_t size) {
  set_has_strlac();
  if (strlac_ == &::google::protobuf::internal::kEmptyString) {
    strlac_ = new ::std::string;
  }
  strlac_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLTowerInfo::mutable_strlac() {
  set_has_strlac();
  if (strlac_ == &::google::protobuf::internal::kEmptyString) {
    strlac_ = new ::std::string;
  }
  return strlac_;
}
inline ::std::string* BLTowerInfo::release_strlac() {
  clear_has_strlac();
  if (strlac_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strlac_;
    strlac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string strSigstr = 3;
inline bool BLTowerInfo::has_strsigstr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BLTowerInfo::set_has_strsigstr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BLTowerInfo::clear_has_strsigstr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BLTowerInfo::clear_strsigstr() {
  if (strsigstr_ != &::google::protobuf::internal::kEmptyString) {
    strsigstr_->clear();
  }
  clear_has_strsigstr();
}
inline const ::std::string& BLTowerInfo::strsigstr() const {
  return *strsigstr_;
}
inline void BLTowerInfo::set_strsigstr(const ::std::string& value) {
  set_has_strsigstr();
  if (strsigstr_ == &::google::protobuf::internal::kEmptyString) {
    strsigstr_ = new ::std::string;
  }
  strsigstr_->assign(value);
}
inline void BLTowerInfo::set_strsigstr(const char* value) {
  set_has_strsigstr();
  if (strsigstr_ == &::google::protobuf::internal::kEmptyString) {
    strsigstr_ = new ::std::string;
  }
  strsigstr_->assign(value);
}
inline void BLTowerInfo::set_strsigstr(const char* value, size_t size) {
  set_has_strsigstr();
  if (strsigstr_ == &::google::protobuf::internal::kEmptyString) {
    strsigstr_ = new ::std::string;
  }
  strsigstr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLTowerInfo::mutable_strsigstr() {
  set_has_strsigstr();
  if (strsigstr_ == &::google::protobuf::internal::kEmptyString) {
    strsigstr_ = new ::std::string;
  }
  return strsigstr_;
}
inline ::std::string* BLTowerInfo::release_strsigstr() {
  clear_has_strsigstr();
  if (strsigstr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strsigstr_;
    strsigstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// BLLocationInfo

// repeated .NetworkMessages.BLTowerInfo towers = 1;
inline int BLLocationInfo::towers_size() const {
  return towers_.size();
}
inline void BLLocationInfo::clear_towers() {
  towers_.Clear();
}
inline const ::NetworkMessages::BLTowerInfo& BLLocationInfo::towers(int index) const {
  return towers_.Get(index);
}
inline ::NetworkMessages::BLTowerInfo* BLLocationInfo::mutable_towers(int index) {
  return towers_.Mutable(index);
}
inline ::NetworkMessages::BLTowerInfo* BLLocationInfo::add_towers() {
  return towers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NetworkMessages::BLTowerInfo >&
BLLocationInfo::towers() const {
  return towers_;
}
inline ::google::protobuf::RepeatedPtrField< ::NetworkMessages::BLTowerInfo >*
BLLocationInfo::mutable_towers() {
  return &towers_;
}

// required string strMcc = 2;
inline bool BLLocationInfo::has_strmcc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BLLocationInfo::set_has_strmcc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BLLocationInfo::clear_has_strmcc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BLLocationInfo::clear_strmcc() {
  if (strmcc_ != &::google::protobuf::internal::kEmptyString) {
    strmcc_->clear();
  }
  clear_has_strmcc();
}
inline const ::std::string& BLLocationInfo::strmcc() const {
  return *strmcc_;
}
inline void BLLocationInfo::set_strmcc(const ::std::string& value) {
  set_has_strmcc();
  if (strmcc_ == &::google::protobuf::internal::kEmptyString) {
    strmcc_ = new ::std::string;
  }
  strmcc_->assign(value);
}
inline void BLLocationInfo::set_strmcc(const char* value) {
  set_has_strmcc();
  if (strmcc_ == &::google::protobuf::internal::kEmptyString) {
    strmcc_ = new ::std::string;
  }
  strmcc_->assign(value);
}
inline void BLLocationInfo::set_strmcc(const char* value, size_t size) {
  set_has_strmcc();
  if (strmcc_ == &::google::protobuf::internal::kEmptyString) {
    strmcc_ = new ::std::string;
  }
  strmcc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLLocationInfo::mutable_strmcc() {
  set_has_strmcc();
  if (strmcc_ == &::google::protobuf::internal::kEmptyString) {
    strmcc_ = new ::std::string;
  }
  return strmcc_;
}
inline ::std::string* BLLocationInfo::release_strmcc() {
  clear_has_strmcc();
  if (strmcc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strmcc_;
    strmcc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string strMnc = 3;
inline bool BLLocationInfo::has_strmnc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BLLocationInfo::set_has_strmnc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BLLocationInfo::clear_has_strmnc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BLLocationInfo::clear_strmnc() {
  if (strmnc_ != &::google::protobuf::internal::kEmptyString) {
    strmnc_->clear();
  }
  clear_has_strmnc();
}
inline const ::std::string& BLLocationInfo::strmnc() const {
  return *strmnc_;
}
inline void BLLocationInfo::set_strmnc(const ::std::string& value) {
  set_has_strmnc();
  if (strmnc_ == &::google::protobuf::internal::kEmptyString) {
    strmnc_ = new ::std::string;
  }
  strmnc_->assign(value);
}
inline void BLLocationInfo::set_strmnc(const char* value) {
  set_has_strmnc();
  if (strmnc_ == &::google::protobuf::internal::kEmptyString) {
    strmnc_ = new ::std::string;
  }
  strmnc_->assign(value);
}
inline void BLLocationInfo::set_strmnc(const char* value, size_t size) {
  set_has_strmnc();
  if (strmnc_ == &::google::protobuf::internal::kEmptyString) {
    strmnc_ = new ::std::string;
  }
  strmnc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BLLocationInfo::mutable_strmnc() {
  set_has_strmnc();
  if (strmnc_ == &::google::protobuf::internal::kEmptyString) {
    strmnc_ = new ::std::string;
  }
  return strmnc_;
}
inline ::std::string* BLLocationInfo::release_strmnc() {
  clear_has_strmnc();
  if (strmnc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strmnc_;
    strmnc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// BLNetworkSignalValue

// required int32 nRSSI = 1;
inline bool BLNetworkSignalValue::has_nrssi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BLNetworkSignalValue::set_has_nrssi() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BLNetworkSignalValue::clear_has_nrssi() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BLNetworkSignalValue::clear_nrssi() {
  nrssi_ = 0;
  clear_has_nrssi();
}
inline ::google::protobuf::int32 BLNetworkSignalValue::nrssi() const {
  return nrssi_;
}
inline void BLNetworkSignalValue::set_nrssi(::google::protobuf::int32 value) {
  set_has_nrssi();
  nrssi_ = value;
}

// required int32 nRSRP = 2;
inline bool BLNetworkSignalValue::has_nrsrp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BLNetworkSignalValue::set_has_nrsrp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BLNetworkSignalValue::clear_has_nrsrp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BLNetworkSignalValue::clear_nrsrp() {
  nrsrp_ = 0;
  clear_has_nrsrp();
}
inline ::google::protobuf::int32 BLNetworkSignalValue::nrsrp() const {
  return nrsrp_;
}
inline void BLNetworkSignalValue::set_nrsrp(::google::protobuf::int32 value) {
  set_has_nrsrp();
  nrsrp_ = value;
}

// required int32 nRSCP = 3;
inline bool BLNetworkSignalValue::has_nrscp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BLNetworkSignalValue::set_has_nrscp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BLNetworkSignalValue::clear_has_nrscp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BLNetworkSignalValue::clear_nrscp() {
  nrscp_ = 0;
  clear_has_nrscp();
}
inline ::google::protobuf::int32 BLNetworkSignalValue::nrscp() const {
  return nrscp_;
}
inline void BLNetworkSignalValue::set_nrscp(::google::protobuf::int32 value) {
  set_has_nrscp();
  nrscp_ = value;
}

// required int32 nRSRQ = 4;
inline bool BLNetworkSignalValue::has_nrsrq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BLNetworkSignalValue::set_has_nrsrq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BLNetworkSignalValue::clear_has_nrsrq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BLNetworkSignalValue::clear_nrsrq() {
  nrsrq_ = 0;
  clear_has_nrsrq();
}
inline ::google::protobuf::int32 BLNetworkSignalValue::nrsrq() const {
  return nrsrq_;
}
inline void BLNetworkSignalValue::set_nrsrq(::google::protobuf::int32 value) {
  set_has_nrsrq();
  nrsrq_ = value;
}

// required int32 nEcno = 5;
inline bool BLNetworkSignalValue::has_necno() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BLNetworkSignalValue::set_has_necno() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BLNetworkSignalValue::clear_has_necno() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BLNetworkSignalValue::clear_necno() {
  necno_ = 0;
  clear_has_necno();
}
inline ::google::protobuf::int32 BLNetworkSignalValue::necno() const {
  return necno_;
}
inline void BLNetworkSignalValue::set_necno(::google::protobuf::int32 value) {
  set_has_necno();
  necno_ = value;
}

// required int32 nBer = 6;
inline bool BLNetworkSignalValue::has_nber() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BLNetworkSignalValue::set_has_nber() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BLNetworkSignalValue::clear_has_nber() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BLNetworkSignalValue::clear_nber() {
  nber_ = 0;
  clear_has_nber();
}
inline ::google::protobuf::int32 BLNetworkSignalValue::nber() const {
  return nber_;
}
inline void BLNetworkSignalValue::set_nber(::google::protobuf::int32 value) {
  set_has_nber();
  nber_ = value;
}

// -------------------------------------------------------------------

// BLNetworkGetLTEBandEx

// required int32 nNetMode = 1;
inline bool BLNetworkGetLTEBandEx::has_nnetmode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BLNetworkGetLTEBandEx::set_has_nnetmode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BLNetworkGetLTEBandEx::clear_has_nnetmode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BLNetworkGetLTEBandEx::clear_nnetmode() {
  nnetmode_ = 0;
  clear_has_nnetmode();
}
inline ::google::protobuf::int32 BLNetworkGetLTEBandEx::nnetmode() const {
  return nnetmode_;
}
inline void BLNetworkGetLTEBandEx::set_nnetmode(::google::protobuf::int32 value) {
  set_has_nnetmode();
  nnetmode_ = value;
}

// required int32 nNetBand = 2;
inline bool BLNetworkGetLTEBandEx::has_nnetband() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BLNetworkGetLTEBandEx::set_has_nnetband() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BLNetworkGetLTEBandEx::clear_has_nnetband() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BLNetworkGetLTEBandEx::clear_nnetband() {
  nnetband_ = 0;
  clear_has_nnetband();
}
inline ::google::protobuf::int32 BLNetworkGetLTEBandEx::nnetband() const {
  return nnetband_;
}
inline void BLNetworkGetLTEBandEx::set_nnetband(::google::protobuf::int32 value) {
  set_has_nnetband();
  nnetband_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NetworkMessages

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_network_5fmessages_2eproto__INCLUDED
